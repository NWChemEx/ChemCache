/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_atomicinfo.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_atomicinfo.py is run.
 */

#include "atoms.hpp"
#include <simde/chemical_system/symbol_from_Z.hpp>
#include <simde/types.hpp>

namespace chemcache {

using sym_pt = simde::SymbolFromZ;
using sym_t  = simde::type::atomic_symbol;

static constexpr auto module_desc = R"(
Atomic Symbol from Atomic Number
---------------------------------

This module returns atomic symbol associated with the atomic number.
This module was autogenerated.
)";

MODULE_CTOR(sym_from_Z) {
    description(module_desc);
    satisfies_property_type<sym_pt>();
}

MODULE_RUN(sym_from_Z) {
    const auto& [Z] = sym_pt::unwrap_inputs(inputs);

    sym_t sym;
    if(Z == 0) {
        sym = "Ez";
    } else if(Z == 1) {
        sym = "H";
    } else if(Z == 2) {
        sym = "He";
    } else if(Z == 3) {
        sym = "Li";
    } else if(Z == 4) {
        sym = "Be";
    } else if(Z == 5) {
        sym = "B";
    } else if(Z == 6) {
        sym = "C";
    } else if(Z == 7) {
        sym = "N";
    } else if(Z == 8) {
        sym = "O";
    } else if(Z == 9) {
        sym = "F";
    } else if(Z == 10) {
        sym = "Ne";
    } else if(Z == 11) {
        sym = "Na";
    } else if(Z == 12) {
        sym = "Mg";
    } else if(Z == 13) {
        sym = "Al";
    } else if(Z == 14) {
        sym = "Si";
    } else if(Z == 15) {
        sym = "P";
    } else if(Z == 16) {
        sym = "S";
    } else if(Z == 17) {
        sym = "Cl";
    } else if(Z == 18) {
        sym = "Ar";
    } else if(Z == 19) {
        sym = "K";
    } else if(Z == 20) {
        sym = "Ca";
    } else if(Z == 21) {
        sym = "Sc";
    } else if(Z == 22) {
        sym = "Ti";
    } else if(Z == 23) {
        sym = "V";
    } else if(Z == 24) {
        sym = "Cr";
    } else if(Z == 25) {
        sym = "Mn";
    } else if(Z == 26) {
        sym = "Fe";
    } else if(Z == 27) {
        sym = "Co";
    } else if(Z == 28) {
        sym = "Ni";
    } else if(Z == 29) {
        sym = "Cu";
    } else if(Z == 30) {
        sym = "Zn";
    } else if(Z == 31) {
        sym = "Ga";
    } else if(Z == 32) {
        sym = "Ge";
    } else if(Z == 33) {
        sym = "As";
    } else if(Z == 34) {
        sym = "Se";
    } else if(Z == 35) {
        sym = "Br";
    } else if(Z == 36) {
        sym = "Kr";
    } else if(Z == 37) {
        sym = "Rb";
    } else if(Z == 38) {
        sym = "Sr";
    } else if(Z == 39) {
        sym = "Y";
    } else if(Z == 40) {
        sym = "Zr";
    } else if(Z == 41) {
        sym = "Nb";
    } else if(Z == 42) {
        sym = "Mo";
    } else if(Z == 43) {
        sym = "Tc";
    } else if(Z == 44) {
        sym = "Ru";
    } else if(Z == 45) {
        sym = "Rh";
    } else if(Z == 46) {
        sym = "Pd";
    } else if(Z == 47) {
        sym = "Ag";
    } else if(Z == 48) {
        sym = "Cd";
    } else if(Z == 49) {
        sym = "In";
    } else if(Z == 50) {
        sym = "Sn";
    } else if(Z == 51) {
        sym = "Sb";
    } else if(Z == 52) {
        sym = "Te";
    } else if(Z == 53) {
        sym = "I";
    } else if(Z == 54) {
        sym = "Xe";
    } else if(Z == 55) {
        sym = "Cs";
    } else if(Z == 56) {
        sym = "Ba";
    } else if(Z == 57) {
        sym = "La";
    } else if(Z == 58) {
        sym = "Ce";
    } else if(Z == 59) {
        sym = "Pr";
    } else if(Z == 60) {
        sym = "Nd";
    } else if(Z == 61) {
        sym = "Pm";
    } else if(Z == 62) {
        sym = "Sm";
    } else if(Z == 63) {
        sym = "Eu";
    } else if(Z == 64) {
        sym = "Gd";
    } else if(Z == 65) {
        sym = "Tb";
    } else if(Z == 66) {
        sym = "Dy";
    } else if(Z == 67) {
        sym = "Ho";
    } else if(Z == 68) {
        sym = "Er";
    } else if(Z == 69) {
        sym = "Tm";
    } else if(Z == 70) {
        sym = "Yb";
    } else if(Z == 71) {
        sym = "Lu";
    } else if(Z == 72) {
        sym = "Hf";
    } else if(Z == 73) {
        sym = "Ta";
    } else if(Z == 74) {
        sym = "W";
    } else if(Z == 75) {
        sym = "Re";
    } else if(Z == 76) {
        sym = "Os";
    } else if(Z == 77) {
        sym = "Ir";
    } else if(Z == 78) {
        sym = "Pt";
    } else if(Z == 79) {
        sym = "Au";
    } else if(Z == 80) {
        sym = "Hg";
    } else if(Z == 81) {
        sym = "Tl";
    } else if(Z == 82) {
        sym = "Pb";
    } else if(Z == 83) {
        sym = "Bi";
    } else if(Z == 84) {
        sym = "Po";
    } else if(Z == 85) {
        sym = "At";
    } else if(Z == 86) {
        sym = "Rn";
    } else if(Z == 87) {
        sym = "Fr";
    } else if(Z == 88) {
        sym = "Ra";
    } else if(Z == 89) {
        sym = "Ac";
    } else if(Z == 90) {
        sym = "Th";
    } else if(Z == 91) {
        sym = "Pa";
    } else if(Z == 92) {
        sym = "U";
    } else if(Z == 93) {
        sym = "Np";
    } else if(Z == 94) {
        sym = "Pu";
    } else if(Z == 95) {
        sym = "Am";
    } else if(Z == 96) {
        sym = "Cm";
    } else if(Z == 97) {
        sym = "Bk";
    } else if(Z == 98) {
        sym = "Cf";
    } else if(Z == 99) {
        sym = "Es";
    } else if(Z == 100) {
        sym = "Fm";
    } else if(Z == 101) {
        sym = "Md";
    } else if(Z == 102) {
        sym = "No";
    } else if(Z == 103) {
        sym = "Lr";
    } else if(Z == 104) {
        sym = "Rf";
    } else if(Z == 105) {
        sym = "Db";
    } else if(Z == 106) {
        sym = "Sg";
    } else if(Z == 107) {
        sym = "Bh";
    } else if(Z == 108) {
        sym = "Hs";
    } else if(Z == 109) {
        sym = "Mt";
    } else if(Z == 110) {
        sym = "Ds";
    } else if(Z == 111) {
        sym = "Rg";
    } else if(Z == 112) {
        sym = "Cn";
    } else if(Z == 113) {
        sym = "Nh";
    } else if(Z == 114) {
        sym = "Fl";
    } else if(Z == 115) {
        sym = "Mc";
    } else if(Z == 116) {
        sym = "Lv";
    } else if(Z == 117) {
        sym = "Ts";
    } else if(Z == 118) {
        sym = "Og";
    } else {
        throw std::out_of_range("Symbol not available for Z");
    }

    auto rv = results();
    return sym_pt::wrap_results(rv, sym);
}

} // namespace chemcache
