/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_atomicinfo.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_atomicinfo.py is run.
 */

#include "atoms.hpp"
#include <simde/atoms/symbol_from_Z.hpp>
#include <simde/types.hpp>

namespace chemcache {

using sym_pt = simde::SymbolFromZ;
using sym_t  = simde::type::atomic_symbol;

static constexpr auto module_desc = R"(
Atomic Symbol from Atomic Number
---------------------------------

This module returns atomic symbol associated with the atomic number.
This module was autogenerated.
)";

MODULE_CTOR(sym_from_Z) {
    description(module_desc);
    satisfies_property_type<sym_pt>();
}

MODULE_RUN(sym_from_Z) {
    const auto& [Z] = sym_pt::unwrap_inputs(inputs);

    sym_t sym;
    if(Z == 1) {
        sym = "H";
    } else if(Z == 8) {
        sym = "O";
    } else {
        throw std::out_of_range("Symbol not available for Z");
    }

    auto rv = results();
    return sym_pt::wrap_results(rv, sym);
}

} // namespace chemcache