/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_atomicinfo.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_atomicinfo.py is run.
 */

#include "atoms.hpp"
#include <simde/chemical_system/atom.hpp>
#include <simde/types.hpp>

namespace chemcache {

using z_t        = simde::type::atomic_number;
using atom_t     = simde::type::atom;
using isotope_pt = simde::Atom<std::pair<z_t, z_t>>;

static constexpr auto module_desc = R"(
Atoms with Isotope Mass
---------------------------------

This module returns an instance of an atomic isotope.
This module was autogenerated.
)";

MODULE_CTOR(atoms_isotope) {
    description(module_desc);
    satisfies_property_type<isotope_pt>();
}

MODULE_RUN(atoms_isotope) {
    const auto& [Z_and_N] = isotope_pt::unwrap_inputs(inputs);
    auto rv               = results();

    auto [Z, N]   = Z_and_N;
    auto message1 = "Isotopes not available for Z";
    auto message2 = "Isotope not available for Z and mass number";
    atom_t atom;
    if(Z == 1) {
        if(N == 1) {
            atom = atom_t{"H", Z, 1837.1526472934618, 0.0, 0.0, 0.0};
        } else if(N == 2) {
            atom = atom_t{"H", Z, 3671.4829413173247, 0.0, 0.0, 0.0};
        } else {
            throw std::out_of_range(message2);
        }
    } else if(Z == 8) {
        if(N == 16) {
            atom = atom_t{"O", Z, 29156.94569842209, 0.0, 0.0, 0.0};
        } else if(N == 17) {
            atom = atom_t{"O", Z, 30987.521555096086, 0.0, 0.0, 0.0};
        } else if(N == 18) {
            atom = atom_t{"O", Z, 32810.46081966976, 0.0, 0.0, 0.0};
        } else {
            throw std::out_of_range(message2);
        }
    } else {
        throw std::out_of_range(message1);
    }

    return isotope_pt::wrap_results(rv, atom);
}

} // namespace chemcache