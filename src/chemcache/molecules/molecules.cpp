/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_molecules.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_molecules.py is run.
 */

#include "molecules.hpp"
#include <simde/chemical_system/atom.hpp>
#include <simde/chemical_system/molecule_from_string.hpp>
#include <simde/types.hpp>

namespace chemcache {

using molecule_pt = simde::MoleculeFromString;
using atom_pt     = simde::AtomFromZ;
using molecule_t  = simde::type::molecule;
using atom_t      = simde::type::atom;
using z_t         = simde::type::atomic_number;

static constexpr auto module_desc = R"(
NWChemEx Molecules
---------------------------------

This module returns an instance of a particular module.
This module was autogenerated.
)";

MODULE_CTOR(default_molecules) {
    description(module_desc);
    satisfies_property_type<molecule_pt>();
    add_submodule<atom_pt>("Atoms");
}

MODULE_RUN(default_molecules) {
    const auto& [name] = molecule_pt::unwrap_inputs(inputs);
    auto& atoms_mod    = submods.at("Atoms");

    auto translate = [](auto& a, double x, double y, double z) {
        a.x() = x;
        a.y() = y;
        a.z() = z;
    };

    atom_t atm;
    molecule_t mol;
    if(name == "water") {
        atm = atoms_mod.run_as<atom_pt>(z_t{8});
        translate(atm, 0.0, -0.1432223429807816, 0.0);
        mol.push_back(atm);

        atm = atoms_mod.run_as<atom_pt>(z_t{1});
        translate(atm, 1.6380335020342418, 1.1365568803584036, 0.0);
        mol.push_back(atm);

        atm = atoms_mod.run_as<atom_pt>(z_t{1});
        translate(atm, -1.6380335020342418, 1.1365568803584036, 0.0);
        mol.push_back(atm);

    } else {
        throw std::out_of_range("No molecule found for name: " + name);
    }

    auto rv = results();
    return molecule_pt::wrap_results(rv, mol);
}

} // namespace chemcache
