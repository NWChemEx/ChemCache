/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_densities.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_densities.py is run.
 */

#include "../density.hpp"
#include "sto_dash_3g.hpp"

namespace chemcache {

using atomic_den_pt = simde::AtomicDensityMatrixFromZ;
using udouble       = tensorwrapper::types::udouble;

static constexpr auto module_desc = R"(
sto-3g atomic density matrices
------------------------------

This module returns precomputed atomic densities in this basis set.
This module was autogenerated.
)";

MODULE_CTOR(sto_dash_3g_atom_density_matrix) {
    description(module_desc);
    satisfies_property_type<atomic_den_pt>();
    add_input<bool>("With UQ?").set_default(false);
}

MODULE_RUN(sto_dash_3g_atom_density_matrix) {
    const auto& [Z]         = atomic_den_pt::unwrap_inputs(inputs);
    const auto is_uncertain = inputs.at("With UQ?").value<bool>();
    auto& rt                = this->get_runtime();

    simde::type::tensor result;
    if(is_uncertain) {
        result = sto_dash_3g_atom_density_matrix_<udouble>(Z, rt);
    } else {
        result = sto_dash_3g_atom_density_matrix_<double>(Z, rt);
    }
    auto rv = results();
    return atomic_den_pt::wrap_results(rv, result);
}

} // namespace chemcache
