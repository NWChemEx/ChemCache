/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pcvdz.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pcvdz_13() {
    // Basis Set name and origin point
    std::string name("cc-pcvdz");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.9025000000e-04, 2.2506400000e-03, 1.1645900000e-02,
                4.6737700000e-02, 1.4629900000e-01, 3.3028300000e-01,
                4.1586100000e-01, 1.8925300000e-01, 1.1588900000e-02,
                -1.2838500000e-03, 4.2588300000e-04, -1.9928000000e-04},
      doubles_t{6.4150000000e+04, 9.6170000000e+03, 2.1890000000e+03,
                6.2050000000e+02, 2.0270000000e+02, 7.3150000000e+01,
                2.8550000000e+01, 1.1770000000e+01, 3.3000000000e+00,
                1.1730000000e+00, 1.7520000000e-01, 6.4730000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-7.5804800000e-05, -5.8179100000e-04, -3.0811300000e-03,
                -1.2311200000e-02, -4.1978100000e-02, -1.0337100000e-01,
                -1.9630800000e-01, -8.3000200000e-02, 5.4104000000e-01,
                5.7879600000e-01, 2.8814700000e-02, -9.5379500000e-03},
      doubles_t{6.4150000000e+04, 9.6170000000e+03, 2.1890000000e+03,
                6.2050000000e+02, 2.0270000000e+02, 7.3150000000e+01,
                2.8550000000e+01, 1.1770000000e+01, 3.3000000000e+00,
                1.1730000000e+00, 1.7520000000e-01, 6.4730000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.7507800000e-05, 1.3420800000e-04, 7.1244200000e-04,
                2.8433000000e-03, 9.7684200000e-03, 2.4185000000e-02,
                4.7499300000e-02, 2.0362100000e-02, -1.5878800000e-01,
                -3.1169400000e-01, 6.2014700000e-01, 5.2094300000e-01},
      doubles_t{6.4150000000e+04, 9.6170000000e+03, 2.1890000000e+03,
                6.2050000000e+02, 2.0270000000e+02, 7.3150000000e+01,
                2.8550000000e+01, 1.1770000000e+01, 3.3000000000e+00,
                1.1730000000e+00, 1.7520000000e-01, 6.4730000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{6.4730000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{4.0300000000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{4.0684700000e-03, 3.0681500000e-02, 1.2914900000e-01,
                           3.2083100000e-01, 4.5381500000e-01, 2.7506600000e-01,
                           1.9080700000e-02, -3.1284800000e-03},
                 doubles_t{2.5880000000e+02, 6.0890000000e+01, 1.9140000000e+01,
                           6.8810000000e+00, 2.5740000000e+00, 9.5720000000e-01,
                           2.0990000000e-01, 5.9860000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-7.4805300000e-04, -5.4579600000e-03, -2.4537100000e-02,
                -5.8213800000e-02, -9.8375600000e-02, -2.6006400000e-02,
                4.6402000000e-01, 6.4887000000e-01},
      doubles_t{2.5880000000e+02, 6.0890000000e+01, 1.9140000000e+01,
                6.8810000000e+00, 2.5740000000e+00, 9.5720000000e-01,
                2.0990000000e-01, 5.9860000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{5.9860000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.5290000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{4.7250000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.8900000000e-01}));
    return abs_t(name, 13, r0, shells.begin(), shells.end());
} // cc_dash_pcvdz_13

} // namespace chemcache
