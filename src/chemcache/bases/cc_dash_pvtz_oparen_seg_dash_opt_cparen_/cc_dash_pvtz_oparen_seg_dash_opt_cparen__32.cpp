/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvtz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvtz_oparen_seg_dash_opt_cparen__32() {
    // Basis Set name and origin point
    std::string name("cc-pvtz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{7.4000000000e-06, 5.7390000000e-05, 3.0190000000e-04,
                1.2733000000e-03, 4.6099400000e-03, 1.4802360000e-02,
                4.2386680000e-02, 1.0631536000e-01, 2.1942294000e-01,
                3.2697184000e-01, 2.6576068000e-01, 1.0109853000e-01,
                1.6802391000e-01, 2.0042655000e-01, 4.9233850000e-02},
      doubles_t{7.4479668000e+06, 1.1153182000e+06, 2.5384265000e+05,
                7.1915285000e+04, 2.3470181000e+04, 8.4774918000e+03,
                3.3083908000e+03, 1.3726054000e+03, 5.9822007000e+02,
                2.7138602000e+02, 1.2697795000e+02, 6.0222065000e+01,
                2.8018582000e+01, 1.3517522000e+01, 6.3094060000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0000000000e-08, -1.0000000000e-08, -6.6100000000e-06,
                -5.3350000000e-05, -4.6763000000e-04, -2.7736600000e-03,
                -1.4271790000e-02, -5.1377460000e-02, -1.0859001000e-01,
                5.6890700000e-03, 4.5912941000e-01, 5.5867647000e-01,
                1.3923015000e-01, -9.2042000000e-04},
      doubles_t{1.1153182000e+06, 2.5384265000e+05, 2.3470181000e+04,
                8.4774918000e+03, 3.3083908000e+03, 1.3726054000e+03,
                5.9822007000e+02, 2.7138602000e+02, 1.2697795000e+02,
                6.0222065000e+01, 2.8018582000e+01, 1.3517522000e+01,
                6.3094060000e+00, 2.9045340000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.0000000000e-08, -4.0000000000e-08, 5.2000000000e-07,
                3.2200000000e-06, 3.2440000000e-05, 1.9678000000e-04,
                1.2190300000e-03, 4.3877700000e-03, 2.4900500000e-03,
                -8.0488650000e-02, -2.7204617000e-01, 7.2583100000e-02,
                7.4610549000e-01, 4.9435091000e-01},
      doubles_t{7.4479668000e+06, 2.5384265000e+05, 8.4774918000e+03,
                3.3083908000e+03, 1.3726054000e+03, 5.9822007000e+02,
                2.7138602000e+02, 1.2697795000e+02, 6.0222065000e+01,
                2.8018582000e+01, 1.3517522000e+01, 6.3094060000e+00,
                2.9045340000e+00, 1.2875560000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{7.0000000000e-08, -4.0000000000e-08, -9.0000000000e-08,
                -3.5800000000e-06, -3.6700000000e-06, 3.6610000000e-05,
                1.0405900000e-03, 5.5783800000e-03, 4.6353600000e-03,
                -1.3675848000e-01, -4.8384896000e-01, 1.3404429000e-01,
                1.3077014600e+00, 6.6509300000e-01, 7.7399467000e-01},
      doubles_t{7.4479668000e+06, 1.1153182000e+06, 2.5384265000e+05,
                3.3083908000e+03, 1.3726054000e+03, 5.9822007000e+02,
                2.7138602000e+02, 1.2697795000e+02, 6.0222065000e+01,
                2.8018582000e+01, 1.3517522000e+01, 6.3094060000e+00,
                2.9045340000e+00, 1.2875560000e+00, 1.6773200000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{3.3655200000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{7.1069000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.5689000000e-04, 3.9561500000e-03, 2.1314360000e-02,
                8.1876280000e-02, 2.2240500000e-01, 3.9067982000e-01,
                3.5608076000e-01, 1.0592478000e-01, 1.1308900000e-03},
      doubles_t{6.9795982000e+03, 1.6541648000e+03, 5.3602865000e+02,
                2.0353713000e+02, 8.5237530000e+01, 3.7841962000e+01,
                1.7406512000e+01, 7.8814920000e+00, 3.5332130000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.1800000000e-06, -6.9940000000e-05, -1.2193700000e-03,
                -7.2596300000e-03, -2.4877220000e-02, -9.2043100000e-03,
                2.3155412000e-01, 5.3687029000e-01, 4.0442235000e-01},
      doubles_t{6.9795982000e+03, 5.3602865000e+02, 2.0353713000e+02,
                8.5237530000e+01, 3.7841962000e+01, 1.7406512000e+01,
                7.8814920000e+00, 3.5332130000e+00, 1.5214730000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{5.6270400000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{5.4000000000e-07, -2.2785000000e-04, -1.1671300000e-03,
                -4.6697300000e-03, -1.0676200000e-03, 3.5550170000e-02,
                8.6615390000e-02, 2.9862230000e-02, 7.5798364000e-01},
      doubles_t{6.9795982000e+03, 2.0353713000e+02, 8.5237530000e+01,
                3.7841962000e+01, 1.7406512000e+01, 7.8814920000e+00,
                3.5332130000e+00, 1.5214730000e+00, 1.9909300000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{6.7031000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{1.8275000000e-03, 1.5154500000e-02, 6.6046000000e-02,
                           1.8394700000e-01, 3.2278720000e-01, 3.7294590000e-01,
                           2.7517300000e-01},
                 doubles_t{2.8223911000e+02, 8.4549957000e+01, 3.2073656000e+01,
                           1.3497495000e+01, 5.9585500000e+00, 2.6107880000e+00,
                           1.1039870000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{4.2404900000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.5200000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 3, doubles_t{1.0000000000e+00},
                                   doubles_t{3.4580000000e-01}));
    return abs_t(name, 32, r0, shells.begin(), shells.end());
} // cc_dash_pvtz_oparen_seg_dash_opt_cparen__32

} // namespace chemcache
