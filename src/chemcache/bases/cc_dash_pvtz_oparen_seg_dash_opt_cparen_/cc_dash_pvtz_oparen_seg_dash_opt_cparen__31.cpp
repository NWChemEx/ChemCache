/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvtz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvtz_oparen_seg_dash_opt_cparen__31() {
    // Basis Set name and origin point
    std::string name("cc-pvtz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{8.0000000000e-06, 6.2200000000e-05, 3.2701000000e-04,
                1.3794000000e-03, 4.9984500000e-03, 1.6052560000e-02,
                4.5945680000e-02, 1.1481758000e-01, 2.3535988000e-01,
                3.4598908000e-01, 2.7759527000e-01, 8.5871200000e-02,
                6.3765710000e-02, 6.8982930000e-02, 1.3266470000e-02},
      doubles_t{6.5581573000e+06, 9.8202534000e+05, 2.2346769000e+05,
                6.3288291000e+04, 2.0642940000e+04, 7.4505224000e+03,
                2.9050744000e+03, 1.2042100000e+03, 5.2430454000e+02,
                2.3746563000e+02, 1.1057866000e+02, 5.1374624000e+01,
                2.4440846000e+01, 1.1768591000e+01, 5.3421190000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0000000000e-08, 9.0000000000e-08, -6.6600000000e-06,
                -6.2510000000e-05, -5.2565000000e-04, -3.1895100000e-03,
                -1.6012070000e-02, -5.6809270000e-02, -1.0995882000e-01,
                3.6701420000e-02, 4.9656133000e-01, 5.3130695000e-01,
                1.1020454000e-01, -3.8873200000e-03},
      doubles_t{6.5581573000e+06, 2.2346769000e+05, 2.0642940000e+04,
                7.4505224000e+03, 2.9050744000e+03, 1.2042100000e+03,
                5.2430454000e+02, 2.3746563000e+02, 1.1057866000e+02,
                5.1374624000e+01, 2.4440846000e+01, 1.1768591000e+01,
                5.3421190000e+00, 2.4950360000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-5.0000000000e-08, 4.0000000000e-08, 2.0000000000e-08,
                3.8500000000e-06, 1.9870000000e-05, 1.6246000000e-04,
                7.6851000000e-04, 3.4705000000e-03, 8.2219600000e-03,
                -2.5760000000e-04, -1.0978347000e-01, -2.7505583000e-01,
                1.2979210000e-01, 7.1958620000e-01, 4.3322985000e-01},
      doubles_t{6.5581573000e+06, 9.8202534000e+05, 2.2346769000e+05,
                7.4505224000e+03, 2.9050744000e+03, 1.2042100000e+03,
                5.2430454000e+02, 2.3746563000e+02, 1.1057866000e+02,
                5.1374624000e+01, 2.4440846000e+01, 1.1768591000e+01,
                5.3421190000e+00, 2.4950360000e+00, 1.0987730000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.0000000000e-08, -5.0000000000e-08, -2.0000000000e-08,
                5.6100000000e-06, 2.5670000000e-05, 1.4226000000e-04,
                2.4796000000e-04, -1.8862000000e-04, -8.1790000000e-04,
                2.8537440000e-02, 9.0068430000e-02, -4.8173560000e-02,
                -2.0307845000e-01, 1.0641637000e-01, -5.2790736000e-01},
      doubles_t{6.5581573000e+06, 9.8202534000e+05, 2.2346769000e+05,
                2.9050744000e+03, 1.2042100000e+03, 5.2430454000e+02,
                2.3746563000e+02, 1.1057866000e+02, 5.1374624000e+01,
                2.4440846000e+01, 1.1768591000e+01, 5.3421190000e+00,
                2.4950360000e+00, 1.0987730000e+00, 2.6018000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.2707900000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{5.4408000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.1690000000e-04, 2.7648000000e-03, 1.5120630000e-02,
                5.9959760000e-02, 1.7332393000e-01, 3.4111820000e-01,
                3.8976530000e-01, 1.8373841000e-01, 2.0963670000e-02},
      doubles_t{8.0501674000e+03, 1.9075361000e+03, 6.1862746000e+02,
                2.3532417000e+02, 9.8899646000e+01, 4.4248215000e+01,
                2.0617429000e+01, 9.7805160000e+00, 4.4412380000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-9.4000000000e-07, -7.2290000000e-05, -2.5851000000e-04,
                -2.5811700000e-03, -6.1971200000e-03, -1.4875490000e-02,
                4.9999960000e-02, 1.6478326000e-01, 2.4875643000e-01},
      doubles_t{8.0501674000e+03, 6.1862746000e+02, 2.3532417000e+02,
                9.8899646000e+01, 4.4248215000e+01, 2.0617429000e+01,
                9.7805160000e+00, 4.4412380000e+00, 1.9640450000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.4500000000e-06, -6.8029000000e-04, -3.9869400000e-03,
                -1.7570940000e-02, -2.2870880000e-02, 9.0465350000e-02,
                4.2938682000e-01, 3.9753850000e-01, 2.8929412000e-01},
      doubles_t{8.0501674000e+03, 2.3532417000e+02, 9.8899646000e+01,
                4.4248215000e+01, 2.0617429000e+01, 9.7805160000e+00,
                4.4412380000e+00, 1.9640450000e+00, 8.3357800000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.9344500000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{5.6117000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{2.0270000000e-03, 1.6508800000e-02, 7.0382300000e-02,
                           1.9114300000e-01, 3.2540920000e-01, 3.6781990000e-01,
                           2.7446850000e-01},
                 doubles_t{2.4414741000e+02, 7.3067595000e+01, 2.7592081000e+01,
                           1.1546518000e+01, 5.0486280000e+00, 2.1784650000e+00,
                           9.0025300000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{3.3732700000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.1690000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 3, doubles_t{1.0000000000e+00},
                                   doubles_t{2.8810000000e-01}));
    return abs_t(name, 31, r0, shells.begin(), shells.end());
} // cc_dash_pvtz_oparen_seg_dash_opt_cparen__31

} // namespace chemcache
