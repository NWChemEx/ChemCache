/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvtz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvtz_oparen_seg_dash_opt_cparen__34() {
    // Basis Set name and origin point
    std::string name("cc-pvtz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3000000000e-06, 4.8900000000e-05, 2.5740000000e-04,
                1.0861000000e-03, 3.9397900000e-03, 1.2703370000e-02,
                3.6708920000e-02, 9.3828790000e-02, 2.0156259000e-01,
                3.2729445000e-01, 3.2200298000e-01, 1.3458083000e-01,
                1.8646010000e-02, 1.0151350000e-02, 3.6939800000e-03},
      doubles_t{9.5636000000e+06, 1.4321000000e+06, 3.2591000000e+05,
                9.2312000000e+04, 3.0116000000e+04, 1.0872000000e+04,
                4.2401000000e+03, 1.7584000000e+03, 7.6659000000e+02,
                3.4843000000e+02, 1.6403000000e+02, 7.9142000000e+01,
                3.5524000000e+01, 1.7305000000e+01, 8.3784000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0000000000e-08, 1.0000000000e-08, -2.0000000000e-08,
                -6.3300000000e-06, -4.0720000000e-05, -3.7344000000e-04,
                -2.1487300000e-03, -1.1478990000e-02, -4.2513740000e-02,
                -1.0245491000e-01, -3.6537500000e-02, 3.8829415000e-01,
                5.8691452000e-01, 1.9742004000e-01, 8.2610600000e-03},
      doubles_t{9.5636000000e+06, 1.4321000000e+06, 3.2591000000e+05,
                3.0116000000e+04, 1.0872000000e+04, 4.2401000000e+03,
                1.7584000000e+03, 7.6659000000e+02, 3.4843000000e+02,
                1.6403000000e+02, 7.9142000000e+01, 3.5524000000e+01,
                1.7305000000e+01, 8.3784000000e+00, 3.7405000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.0000000000e-08, -2.0000000000e-08, -3.0300000000e-06,
                -2.2610000000e-05, -1.6671000000e-04, -7.8872000000e-04,
                -2.8370500000e-03, -4.8179100000e-03, 7.2573000000e-04,
                -2.3080230000e-02, -2.0946856000e-01, -5.6897100000e-03,
                7.0703055000e-01, 5.5976280000e-01},
      doubles_t{9.5636000000e+06, 1.4321000000e+06, 1.0872000000e+04,
                4.2401000000e+03, 1.7584000000e+03, 7.6659000000e+02,
                3.4843000000e+02, 1.6403000000e+02, 7.9142000000e+01,
                3.5524000000e+01, 1.7305000000e+01, 8.3784000000e+00,
                3.7405000000e+00, 1.6890000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{5.0927000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{4.0000000000e-08, -6.0000000000e-08, -4.0000000000e-08,
                9.0000000000e-08, -3.9600000000e-06, -2.0240000000e-05,
                -1.2587000000e-04, -3.8601000000e-04, -4.6110000000e-04,
                5.6392700000e-03, 2.6002020000e-02, 3.7619900000e-03,
                -1.2768051000e-01, -3.4464332000e-01, 8.4212156000e-01},
      doubles_t{9.5636000000e+06, 1.4321000000e+06, 3.2591000000e+05,
                4.2401000000e+03, 1.7584000000e+03, 7.6659000000e+02,
                3.4843000000e+02, 1.6403000000e+02, 7.9142000000e+01,
                3.5524000000e+01, 1.7305000000e+01, 8.3784000000e+00,
                3.7405000000e+00, 1.6890000000e+00, 2.5520000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.0651000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.5049000000e-04, 3.9048500000e-03, 2.1090160000e-02,
                8.1296790000e-02, 2.2181651000e-01, 3.9084321000e-01,
                3.5600728000e-01, 1.0620681000e-01, 1.1465500000e-03},
      doubles_t{8.0043000000e+03, 1.8969000000e+03, 6.1471000000e+02,
                2.3350000000e+02, 9.7856000000e+01, 4.3514000000e+01,
                2.0063000000e+01, 9.1127000000e+00, 4.1063000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.1500000000e-06, -7.2940000000e-05, -1.2575700000e-03,
                -7.5668400000e-03, -2.6030150000e-02, -8.6241200000e-03,
                2.4008483000e-01, 5.4864451000e-01, 3.8835284000e-01},
      doubles_t{8.0043000000e+03, 6.1471000000e+02, 2.3350000000e+02,
                9.7856000000e+01, 4.3514000000e+01, 2.0063000000e+01,
                9.1127000000e+00, 4.1063000000e+00, 1.7949000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{6.2432000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-4.3000000000e-07, 2.1183000000e-04, 1.1036400000e-03,
                4.6302400000e-03, 2.0335000000e-04, -4.5435650000e-02,
                -1.2139271000e-01, -9.6665320000e-02, 7.5033619000e-01},
      doubles_t{8.0043000000e+03, 2.3350000000e+02, 9.7856000000e+01,
                4.3514000000e+01, 2.0063000000e+01, 9.1127000000e+00,
                4.1063000000e+00, 1.7949000000e+00, 2.4615000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{8.8917000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{1.5655000000e-03, 1.3326200000e-02, 6.0152700000e-02,
                           1.7402930000e-01, 3.1956900000e-01, 3.8120290000e-01,
                           2.7460860000e-01},
                 doubles_t{3.6185000000e+02, 1.0855000000e+02, 4.1433000000e+01,
                           1.7579000000e+01, 7.8627000000e+00, 3.5180000000e+00,
                           1.5348000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{6.0813000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{2.2200000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 3, doubles_t{1.0000000000e+00},
                                   doubles_t{4.6200000000e-01}));
    return abs_t(name, 34, r0, shells.begin(), shells.end());
} // cc_dash_pvtz_oparen_seg_dash_opt_cparen__34

} // namespace chemcache
