/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvtz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvtz_oparen_seg_dash_opt_cparen__33() {
    // Basis Set name and origin point
    std::string name("cc-pvtz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.8000000000e-06, 5.2800000000e-05, 2.7740000000e-04,
                1.1702000000e-03, 4.2422500000e-03, 1.3656710000e-02,
                3.9348960000e-02, 9.9981820000e-02, 2.1243188000e-01,
                3.3739562000e-01, 3.1780963000e-01, 1.1854144000e-01,
                -1.1539400000e-03, -1.2223250000e-02, -3.8348800000e-03},
      doubles_t{8.4823396000e+06, 1.2701509000e+06, 2.8905696000e+05,
                8.1879849000e+04, 2.6716564000e+04, 9.6475842000e+03,
                3.7641195000e+03, 1.5615656000e+03, 6.8081467000e+02,
                3.0924119000e+02, 1.4525736000e+02, 6.9739048000e+01,
                3.1770325000e+01, 1.5391757000e+01, 7.3415260000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.0000000000e-08, -2.0000000000e-08, -6.6500000000e-06,
                -4.6410000000e-05, -4.1659000000e-04, -2.4210700000e-03,
                -1.2718230000e-02, -4.6435800000e-02, -1.0571369000e-01,
                -1.8869690000e-02, 4.2145361000e-01, 5.7684599000e-01,
                1.6956125000e-01, 3.5996800000e-03},
      doubles_t{8.4823396000e+06, 1.2701509000e+06, 2.6716564000e+04,
                9.6475842000e+03, 3.7641195000e+03, 1.5615656000e+03,
                6.8081467000e+02, 3.0924119000e+02, 1.4525736000e+02,
                6.9739048000e+01, 3.1770325000e+01, 1.5391757000e+01,
                7.3415260000e+00, 3.3237160000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0000000000e-08, -3.0000000000e-08, -4.0000000000e-08,
                -9.6000000000e-07, -8.7000000000e-07, -1.3840000000e-05,
                1.8830000000e-05, 3.5257000000e-04, 2.7421300000e-03,
                3.0501100000e-03, -6.0199260000e-02, -2.5564275000e-01,
                1.9802900000e-02, 7.1569363000e-01, 5.2422834000e-01},
      doubles_t{8.4823396000e+06, 1.2701509000e+06, 2.8905696000e+05,
                9.6475842000e+03, 3.7641195000e+03, 1.5615656000e+03,
                6.8081467000e+02, 3.0924119000e+02, 1.4525736000e+02,
                6.9739048000e+01, 3.1770325000e+01, 1.5391757000e+01,
                7.3415260000e+00, 3.3237160000e+00, 1.4858670000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{4.2108600000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{3.0000000000e-08, -4.0000000000e-08, -1.0000000000e-08,
                -1.3900000000e-06, -1.0350000000e-05, -7.2340000000e-05,
                -3.6923000000e-04, -1.3160000000e-03, -1.0322100000e-03,
                1.9610430000e-02, 7.8074200000e-02, -5.0755700000e-03,
                -2.6618958000e-01, -4.2218649000e-01, 8.2286594000e-01},
      doubles_t{8.4823396000e+06, 1.2701509000e+06, 2.8905696000e+05,
                3.7641195000e+03, 1.5615656000e+03, 6.8081467000e+02,
                3.0924119000e+02, 1.4525736000e+02, 6.9739048000e+01,
                3.1770325000e+01, 1.5391757000e+01, 7.3415260000e+00,
                3.3237160000e+00, 1.4858670000e+00, 2.1150000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{8.8974000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.5989000000e-04, 3.9822500000e-03, 2.1463860000e-02,
                8.2466630000e-02, 2.2392290000e-01, 3.9218752000e-01,
                3.5425572000e-01, 1.0371914000e-01, 7.7918000000e-04},
      doubles_t{7.4238614000e+03, 1.7595166000e+03, 5.7022916000e+02,
                2.1657997000e+02, 9.0734252000e+01, 4.0308791000e+01,
                1.8555502000e+01, 8.3965430000e+00, 3.7673670000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.2500000000e-06, -7.0590000000e-05, -1.2601000000e-03,
                -7.4779600000e-03, -2.5682530000e-02, -7.6383800000e-03,
                2.4066580000e-01, 5.4498893000e-01, 3.9094641000e-01},
      doubles_t{7.4238614000e+03, 5.7022916000e+02, 2.1657997000e+02,
                9.0734252000e+01, 4.0308791000e+01, 1.8555502000e+01,
                8.3965430000e+00, 3.7673670000e+00, 1.6297010000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{5.6826300000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-1.4000000000e-07, 4.6860000000e-05, 2.5544000000e-04,
                1.1167700000e-03, -2.0831000000e-04, -1.5294090000e-02,
                -4.2952020000e-02, -5.2104280000e-02, 7.6045650000e-01},
      doubles_t{7.4238614000e+03, 2.1657997000e+02, 9.0734252000e+01,
                4.0308791000e+01, 1.8555502000e+01, 8.3965430000e+00,
                3.7673670000e+00, 1.6297010000e+00, 2.2250300000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{8.0405000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{1.6840000000e-03, 1.4158600000e-02, 6.2825900000e-02,
                           1.7849930000e-01, 3.2094520000e-01, 3.7735150000e-01,
                           2.7502310000e-01},
                 doubles_t{3.2101961000e+02, 9.6249305000e+01, 3.6644963000e+01,
                           1.5493965000e+01, 6.8911380000e+00, 3.0548310000e+00,
                           1.3142410000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{5.1343000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.8770000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 3, doubles_t{1.0000000000e+00},
                                   doubles_t{4.1580000000e-01}));
    return abs_t(name, 33, r0, shells.begin(), shells.end());
} // cc_dash_pvtz_oparen_seg_dash_opt_cparen__33

} // namespace chemcache
