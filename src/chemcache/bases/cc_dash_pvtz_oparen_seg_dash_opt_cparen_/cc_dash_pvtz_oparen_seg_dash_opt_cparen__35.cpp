/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvtz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvtz_oparen_seg_dash_opt_cparen__35() {
    // Basis Set name and origin point
    std::string name("cc-pvtz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9000000000e-06, 4.6100000000e-05, 2.4220000000e-04,
                1.0226000000e-03, 3.7111400000e-03, 1.1977520000e-02,
                3.4683660000e-02, 8.9072190000e-02, 1.9317644000e-01,
                3.1985383000e-01, 3.2728824000e-01, 1.4810895000e-01,
                2.4545800000e-02, 1.4797020000e-02, 6.3170800000e-03},
      doubles_t{1.0639000000e+07, 1.5934000000e+06, 3.6261000000e+05,
                1.0270000000e+05, 3.3501000000e+04, 1.2093000000e+04,
                4.7159000000e+03, 1.9556000000e+03, 8.5261000000e+02,
                3.8767000000e+02, 1.8268000000e+02, 8.8245000000e+01,
                3.9263000000e+01, 1.9234000000e+01, 9.4057000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-5.0000000000e-08, -3.0000000000e-08, -7.0000000000e-08,
                -5.9000000000e-06, -3.6670000000e-05, -3.4043000000e-04,
                -1.9509200000e-03, -1.0542460000e-02, -3.9575800000e-02,
                -9.9502360000e-02, -4.9196140000e-02, 3.6053462000e-01,
                5.9217869000e-01, 2.2178153000e-01, 1.2667130000e-02},
      doubles_t{1.0639000000e+07, 1.5934000000e+06, 3.6261000000e+05,
                3.3501000000e+04, 1.2093000000e+04, 4.7159000000e+03,
                1.9556000000e+03, 8.5261000000e+02, 3.8767000000e+02,
                1.8268000000e+02, 8.8245000000e+01, 3.9263000000e+01,
                1.9234000000e+01, 9.4057000000e+00, 4.1601000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-6.0000000000e-08, -7.0000000000e-08, 6.0000000000e-08,
                -3.6500000000e-06, -2.3480000000e-05, -1.7889000000e-04,
                -8.3654000000e-04, -3.1518900000e-03, -5.8371000000e-03,
                -5.3066000000e-04, -1.4522660000e-02, -1.9749527000e-01,
                -3.2333730000e-02, 6.9515763000e-01, 5.8634865000e-01},
      doubles_t{1.0639000000e+07, 1.5934000000e+06, 3.6261000000e+05,
                1.2093000000e+04, 4.7159000000e+03, 1.9556000000e+03,
                8.5261000000e+02, 3.8767000000e+02, 1.8268000000e+02,
                8.8245000000e+01, 3.9263000000e+01, 1.9234000000e+01,
                9.4057000000e+00, 4.1601000000e+00, 1.8995000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{6.0472000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.0000000000e-08, -6.0000000000e-08, -2.0000000000e-08,
                -2.2500000000e-06, -1.5500000000e-05, -9.7340000000e-05,
                -4.2732000000e-04, -1.3569400000e-03, -1.2744600000e-03,
                1.2435150000e-02, 5.5666740000e-02, 1.5343910000e-02,
                -2.0074989000e-01, -4.2740586000e-01, 8.6201145000e-01},
      doubles_t{1.0639000000e+07, 1.5934000000e+06, 3.6261000000e+05,
                4.7159000000e+03, 1.9556000000e+03, 8.5261000000e+02,
                3.8767000000e+02, 1.8268000000e+02, 8.8245000000e+01,
                3.9263000000e+01, 1.9234000000e+01, 9.4057000000e+00,
                4.1601000000e+00, 1.8995000000e+00, 3.0114000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.2515000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3569000000e-04, 3.7814500000e-03, 2.0478250000e-02,
                7.9287880000e-02, 2.1787877000e-01, 3.8797206000e-01,
                3.5947991000e-01, 1.1112870000e-01, 1.8858500000e-03},
      doubles_t{8.6765000000e+03, 2.0559000000e+03, 6.6623000000e+02,
                2.5310000000e+02, 1.0612000000e+02, 4.7242000000e+01,
                2.1825000000e+01, 9.9684000000e+00, 4.5171000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.0700000000e-06, -7.5350000000e-05, -1.2331700000e-03,
                -7.5739300000e-03, -2.6137670000e-02, -1.0882740000e-02,
                2.3461081000e-01, 5.5035624000e-01, 3.9215936000e-01},
      doubles_t{8.6765000000e+03, 6.6623000000e+02, 2.5310000000e+02,
                1.0612000000e+02, 4.7242000000e+01, 2.1825000000e+01,
                9.9684000000e+00, 4.5171000000e+00, 1.9982000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{7.0988000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-5.8000000000e-07, 2.7989000000e-04, 1.4789400000e-03,
                6.2396800000e-03, 8.5353000000e-04, -5.7975610000e-02,
                -1.5922769000e-01, -1.1898101000e-01, 7.4578140000e-01},
      doubles_t{8.6765000000e+03, 2.5310000000e+02, 1.0612000000e+02,
                4.7242000000e+01, 2.1825000000e+01, 9.9684000000e+00,
                4.5171000000e+00, 1.9982000000e+00, 2.8145000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.0204000000e-01}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{1.4732000000e-03, 1.2672500000e-02, 5.8045100000e-02,
                           1.7051030000e-01, 3.1859580000e-01, 3.8450230000e-01,
                           2.7377370000e-01},
                 doubles_t{4.0383000000e+02, 1.2117000000e+02, 4.6345000000e+01,
                           1.9721000000e+01, 8.8624000000e+00, 3.9962000000e+00,
                           1.7636000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{7.0619000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{2.6390000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 3, doubles_t{1.0000000000e+00},
                                   doubles_t{5.5150000000e-01}));
    return abs_t(name, 35, r0, shells.begin(), shells.end());
} // cc_dash_pvtz_oparen_seg_dash_opt_cparen__35

} // namespace chemcache
