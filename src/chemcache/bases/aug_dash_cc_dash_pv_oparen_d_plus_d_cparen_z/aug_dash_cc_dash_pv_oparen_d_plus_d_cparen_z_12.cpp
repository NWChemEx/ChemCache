/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "aug_dash_cc_dash_pv_oparen_d_plus_d_cparen_z.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t aug_dash_cc_dash_pv_oparen_d_plus_d_cparen_z_12() {
    // Basis Set name and origin point
    std::string name("aug-cc-pv(d+d)z");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{3.4602300000e-04, 2.6807700000e-03, 1.3836700000e-02,
                5.5176700000e-02, 1.6966000000e-01, 3.6470300000e-01,
                4.0685600000e-01, 1.3508900000e-01, 4.9088400000e-03,
                2.8646000000e-04, 2.6459000000e-05, -1.1270800000e-05},
      doubles_t{4.7390000000e+04, 7.1080000000e+03, 1.6180000000e+03,
                4.5840000000e+02, 1.4930000000e+02, 5.3590000000e+01,
                2.0700000000e+01, 8.3840000000e+00, 2.5420000000e+00,
                8.7870000000e-01, 1.0770000000e-01, 3.9990000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-8.7783900000e-05, -6.7472500000e-04, -3.5560300000e-03,
                -1.4215400000e-02, -4.7674800000e-02, -1.1489200000e-01,
                -2.0067600000e-01, -3.4122400000e-02, 5.7045400000e-01,
                5.4230900000e-01, 2.1812800000e-02, -8.2770000000e-03},
      doubles_t{4.7390000000e+04, 7.1080000000e+03, 1.6180000000e+03,
                4.5840000000e+02, 1.4930000000e+02, 5.3590000000e+01,
                2.0700000000e+01, 8.3840000000e+00, 2.5420000000e+00,
                8.7870000000e-01, 1.0770000000e-01, 3.9990000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.6962800000e-05, 1.2986500000e-04, 6.8883100000e-04,
                2.7353300000e-03, 9.3122400000e-03, 2.2326500000e-02,
                4.1119500000e-02, 5.4564200000e-03, -1.3401200000e-01,
                -2.5617600000e-01, 6.0585600000e-01, 5.0944600000e-01},
      doubles_t{4.7390000000e+04, 7.1080000000e+03, 1.6180000000e+03,
                4.5840000000e+02, 1.4930000000e+02, 5.3590000000e+01,
                2.0700000000e+01, 8.3840000000e+00, 2.5420000000e+00,
                8.7870000000e-01, 1.0770000000e-01, 3.9990000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{3.9990000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.4200000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{5.3816100000e-03, 3.9241800000e-02, 1.5744500000e-01,
                           3.5853500000e-01, 4.5722600000e-01, 2.1591800000e-01,
                           6.6494800000e-03, -1.2530400000e-04},
                 doubles_t{1.7990000000e+02, 4.2140000000e+01, 1.3130000000e+01,
                           4.6280000000e+00, 1.6700000000e+00, 5.8570000000e-01,
                           1.3110000000e-01, 4.1120000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-8.6594800000e-04, -6.1597800000e-03, -2.6151900000e-02,
                -5.7064700000e-02, -8.7390600000e-02, -1.2299000000e-02,
                5.0208500000e-01, 5.9724500000e-01},
      doubles_t{1.7990000000e+02, 4.2140000000e+01, 1.3130000000e+01,
                4.6280000000e+00, 1.6700000000e+00, 5.8570000000e-01,
                1.3110000000e-01, 4.1120000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{4.1120000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.0500000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{7.3360000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.9320000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{6.1700000000e-02}));
    return abs_t(name, 12, r0, shells.begin(), shells.end());
} // aug_dash_cc_dash_pv_oparen_d_plus_d_cparen_z_12

} // namespace chemcache
