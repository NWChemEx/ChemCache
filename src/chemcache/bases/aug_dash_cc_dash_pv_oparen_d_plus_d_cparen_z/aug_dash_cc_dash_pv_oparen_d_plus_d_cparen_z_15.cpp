/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "aug_dash_cc_dash_pv_oparen_d_plus_d_cparen_z.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t aug_dash_cc_dash_pv_oparen_d_plus_d_cparen_z_15() {
    // Basis Set name and origin point
    std::string name("aug-cc-pv(d+d)z");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.5550900000e-04, 1.9819300000e-03, 1.0276000000e-02,
                4.1482300000e-02, 1.3198400000e-01, 3.0866200000e-01,
                4.2064700000e-01, 2.2287800000e-01, 1.6403500000e-02,
                -2.5425500000e-03, 7.4805000000e-04, -3.3096300000e-04},
      doubles_t{9.4840000000e+04, 1.4220000000e+04, 3.2360000000e+03,
                9.1710000000e+02, 2.9950000000e+02, 1.0810000000e+02,
                4.2180000000e+01, 1.7280000000e+01, 4.8580000000e+00,
                1.8180000000e+00, 3.3720000000e-01, 1.2320000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-6.9693900000e-05, -5.3526600000e-04, -2.8370900000e-03,
                -1.1398300000e-02, -3.9292900000e-02, -9.9636400000e-02,
                -1.9798300000e-01, -1.1486000000e-01, 5.1859500000e-01,
                6.0184700000e-01, 3.6861200000e-02, -9.7075900000e-03},
      doubles_t{9.4840000000e+04, 1.4220000000e+04, 3.2360000000e+03,
                9.1710000000e+02, 2.9950000000e+02, 1.0810000000e+02,
                4.2180000000e+01, 1.7280000000e+01, 4.8580000000e+00,
                1.8180000000e+00, 3.3720000000e-01, 1.2320000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.9119900000e-05, 1.4722300000e-04, 7.7791200000e-04,
                3.1454600000e-03, 1.0820000000e-02, 2.7995700000e-02,
                5.6397800000e-02, 3.5819000000e-02, -1.9338700000e-01,
                -3.7209700000e-01, 6.2424600000e-01, 5.5172100000e-01},
      doubles_t{9.4840000000e+04, 1.4220000000e+04, 3.2360000000e+03,
                9.1710000000e+02, 2.9950000000e+02, 1.0810000000e+02,
                4.2180000000e+01, 1.7280000000e+01, 4.8580000000e+00,
                1.8180000000e+00, 3.3720000000e-01, 1.2320000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.2320000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{4.1700000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{3.9500500000e-03, 3.0249200000e-02, 1.2955400000e-01,
                           3.2759400000e-01, 4.5699200000e-01, 2.5308600000e-01,
                           1.6879800000e-02, -2.0709300000e-03},
                 doubles_t{3.7050000000e+02, 8.7330000000e+01, 2.7590000000e+01,
                           1.0000000000e+01, 3.8250000000e+00, 1.4940000000e+00,
                           3.9210000000e-01, 1.1860000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-9.5983200000e-04, -7.1117700000e-03, -3.2712200000e-02,
                -7.9578400000e-02, -1.3501600000e-01, -9.1058500000e-03,
                5.3780200000e-01, 5.6906600000e-01},
      doubles_t{3.7050000000e+02, 8.7330000000e+01, 2.7590000000e+01,
                1.0000000000e+01, 3.8250000000e+00, 1.4940000000e+00,
                3.9210000000e-01, 1.1860000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.1860000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{3.4300000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{2.5060000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{3.7400000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.1600000000e-01}));
    return abs_t(name, 15, r0, shells.begin(), shells.end());
} // aug_dash_cc_dash_pv_oparen_d_plus_d_cparen_z_15

} // namespace chemcache
