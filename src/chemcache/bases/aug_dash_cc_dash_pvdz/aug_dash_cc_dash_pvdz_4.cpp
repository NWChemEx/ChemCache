/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "aug_dash_cc_dash_pvdz.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t aug_dash_cc_dash_pvdz_4() {
    // Basis Set name and origin point
    std::string name("aug-cc-pvdz");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.8000000000e-04, 5.2360000000e-03, 2.6606000000e-02,
                9.9993000000e-02, 2.6970200000e-01, 4.5146900000e-01,
                2.9507400000e-01, 1.2587000000e-02, -3.7560000000e-03},
      doubles_t{2.9400000000e+03, 4.4120000000e+02, 1.0050000000e+02,
                2.8430000000e+01, 9.1690000000e+00, 3.1960000000e+00,
                1.1590000000e+00, 1.8110000000e-01, 5.8900000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.2300000000e-04, -9.6600000000e-04, -4.8310000000e-03,
                -1.9314000000e-02, -5.3280000000e-02, -1.2072300000e-01,
                -1.3343500000e-01, 5.3076700000e-01, 5.8011700000e-01},
      doubles_t{2.9400000000e+03, 4.4120000000e+02, 1.0050000000e+02,
                2.8430000000e+01, 9.1690000000e+00, 3.1960000000e+00,
                1.1590000000e+00, 1.8110000000e-01, 5.8900000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{5.8900000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.7900000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{2.9111000000e-02, 1.6936500000e-01, 5.1345800000e-01,
                           4.7933800000e-01},
                 doubles_t{3.6190000000e+00, 7.1100000000e-01, 1.9510000000e-01,
                           6.0180000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{6.0180000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.1100000000e-02}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{2.3540000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{7.2200000000e-02}));
    return abs_t(name, 4, r0, shells.begin(), shells.end());
} // aug_dash_cc_dash_pvdz_4

} // namespace chemcache
