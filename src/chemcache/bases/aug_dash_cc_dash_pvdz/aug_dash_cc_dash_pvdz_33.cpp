/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "aug_dash_cc_dash_pvdz.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t aug_dash_cc_dash_pvdz_33() {
    // Basis Set name and origin point
    std::string name("aug-cc-pvdz");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.0240000000e-04, 1.5709000000e-03, 8.1662000000e-03,
                3.3339900000e-02, 1.0917260000e-01, 2.7188530000e-01,
                4.2085090000e-01, 2.7922570000e-01, 3.0030100000e-02,
                -6.8804000000e-03, 2.4240000000e-03, -1.1491000000e-03,
                3.0950000000e-04, -1.3770000000e-04},
      doubles_t{5.5958380000e+05, 8.3879330000e+04, 1.9092670000e+04,
                5.4073920000e+03, 1.7637560000e+03, 6.3645670000e+02,
                2.4808840000e+02, 1.0157850000e+02, 3.1475510000e+01,
                1.3437280000e+01, 4.0086900000e+00, 1.6849290000e+00,
                3.0001900000e-01, 1.1358700000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-6.3400000000e-05, -4.8830000000e-04, -2.5821000000e-03,
                -1.0540200000e-02, -3.6932500000e-02, -1.0023550000e-01,
                -2.1429480000e-01, -1.8105260000e-01, 4.7254100000e-01,
                6.3861940000e-01, 7.5810700000e-02, -1.3527800000e-02,
                3.1970000000e-03, -1.4056000000e-03},
      doubles_t{5.5958380000e+05, 8.3879330000e+04, 1.9092670000e+04,
                5.4073920000e+03, 1.7637560000e+03, 6.3645670000e+02,
                2.4808840000e+02, 1.0157850000e+02, 3.1475510000e+01,
                1.3437280000e+01, 4.0086900000e+00, 1.6849290000e+00,
                3.0001900000e-01, 1.1358700000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.4600000000e-05, 1.9070000000e-04, 1.0031000000e-03,
                4.1353000000e-03, 1.4425900000e-02, 4.0296200000e-02,
                8.7567000000e-02, 8.3517800000e-02, -2.9329350000e-01,
                -5.4705200000e-01, 5.4387380000e-01, 7.1435910000e-01,
                3.5344300000e-02, -1.0289200000e-02},
      doubles_t{5.5958380000e+05, 8.3879330000e+04, 1.9092670000e+04,
                5.4073920000e+03, 1.7637560000e+03, 6.3645670000e+02,
                2.4808840000e+02, 1.0157850000e+02, 3.1475510000e+01,
                1.3437280000e+01, 4.0086900000e+00, 1.6849290000e+00,
                3.0001900000e-01, 1.1358700000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-6.8000000000e-06, -5.2500000000e-05, -2.7560000000e-04,
                -1.1389000000e-03, -3.9646000000e-03, -1.1142300000e-02,
                -2.4199100000e-02, -2.3633900000e-02, 8.6631700000e-02,
                1.6858390000e-01, -2.0914250000e-01, -4.5009180000e-01,
                6.6039780000e-01, 5.2841520000e-01},
      doubles_t{5.5958380000e+05, 8.3879330000e+04, 1.9092670000e+04,
                5.4073920000e+03, 1.7637560000e+03, 6.3645670000e+02,
                2.4808840000e+02, 1.0157850000e+02, 3.1475510000e+01,
                1.3437280000e+01, 4.0086900000e+00, 1.6849290000e+00,
                3.0001900000e-01, 1.1358700000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.1358700000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{4.1152000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{1.4097000000e-03, 1.1827700000e-02, 5.9328000000e-02,
                           1.9651150000e-01, 3.9978910000e-01, 4.0046530000e-01,
                           1.1641960000e-01, 6.9180000000e-04, 2.1633000000e-03,
                           -4.1500000000e-04, 1.4520000000e-04},
                 doubles_t{3.8863560000e+03, 9.2120200000e+02, 2.9719320000e+02,
                           1.1197510000e+02, 4.6034620000e+01, 1.9874190000e+01,
                           8.3860880000e+00, 3.5587280000e+00, 1.4472820000e+00,
                           3.4777900000e-01, 1.0769900000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-5.5190000000e-04, -4.6550000000e-03, -2.3917600000e-02,
                -8.2562700000e-02, -1.8067910000e-01, -1.7248480000e-01,
                2.0867000000e-01, 5.8236220000e-01, 3.5374650000e-01,
                2.0643900000e-02, -3.6382000000e-03},
      doubles_t{3.8863560000e+03, 9.2120200000e+02, 2.9719320000e+02,
                1.1197510000e+02, 4.6034620000e+01, 1.9874190000e+01,
                8.3860880000e+00, 3.5587280000e+00, 1.4472820000e+00,
                3.4777900000e-01, 1.0769900000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.2360000000e-04, 1.0240000000e-03, 5.3805000000e-03,
                1.8244300000e-02, 4.1597900000e-02, 3.6299800000e-02,
                -5.2356900000e-02, -1.7916670000e-01, -7.4047700000e-02,
                5.3580940000e-01, 5.8881040000e-01},
      doubles_t{3.8863560000e+03, 9.2120200000e+02, 2.9719320000e+02,
                1.1197510000e+02, 4.6034620000e+01, 1.9874190000e+01,
                8.3860880000e+00, 3.5587280000e+00, 1.4472820000e+00,
                3.4777900000e-01, 1.0769900000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.0769900000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{3.1268000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{2.4528800000e-02, 1.4113400000e-01, 3.6875790000e-01,
                           4.8406260000e-01, 2.8244340000e-01},
                 doubles_t{8.4424230000e+01, 2.4181590000e+01, 8.4017770000e+00,
                           2.9805020000e+00, 9.7900300000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{3.0980000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.0780000000e-01}));
    return abs_t(name, 33, r0, shells.begin(), shells.end());
} // aug_dash_cc_dash_pvdz_33

} // namespace chemcache
