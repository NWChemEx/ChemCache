/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_61() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0561900025e-02, 3.6500560015e-01, 6.9275690028e-01},
      doubles_t{1.9159059000e+04, 2.9008327000e+03, 6.3827198000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1085540702e-01, 7.3365284647e-01, 3.3396232115e-01},
      doubles_t{8.4958277000e+02, 8.3341451000e+01, 3.4625265000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8283450955e-01, 9.0212833047e-01, 2.5925730876e-01},
      doubles_t{7.5520257000e+01, 1.4029012000e+01, 6.0294403000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6928961854e-01, 8.6175354327e-01, 3.6189311817e-01},
      doubles_t{1.3179882000e+01, 3.1664005000e+00, 1.5049793000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4675441897e-01, 7.7741644253e-01, 4.1330122261e-01},
      doubles_t{2.5039828000e+00, 5.0626810000e-01, 2.2606300000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.1398980700e-01, 6.2891052058e-01, 5.0774771662e-01},
      doubles_t{2.4982110000e-01, 4.9722400000e-02, 2.1140300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.8478199396e-02, 4.1803259678e-01, 6.4442779504e-01},
      doubles_t{1.2809289000e+03, 3.0067027000e+02, 8.9959488000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.4246101841e-02, 3.9400652118e-01, 6.7292183618e-01},
      doubles_t{1.7515156000e+02, 3.3032232000e+01, 1.3226298000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1746537374e-01, 5.6392996452e-01, 9.2116094205e-02},
      doubles_t{5.7636903000e+00, 2.5431625000e+00, 1.0364114000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1976090228e-01, 5.3713510292e-01, 1.2802690070e-01},
      doubles_t{7.7440030000e-01, 3.3432320000e-01, 1.3759790000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1049559874e-01, 4.7761909453e-01, 5.9134359323e-01},
      doubles_t{1.8722437000e+02, 5.3217800000e+01, 1.7525139000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8535670697e-01, 5.8520091429e-01, 2.9029220709e-01},
      doubles_t{9.8543016000e+00, 3.6872548000e+00, 1.4117181000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.6615803708e-02, 3.2773591403e-01, 5.2408502244e-01,
                           4.1968291797e-01},
                 doubles_t{3.0839766000e+01, 9.3015739000e+00, 3.0627573000e+00,
                           9.0819810000e-01}));
    return abs_t(name, 61, r0, shells.begin(), shells.end());
} // mini_61

} // namespace chemcache
