/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_58() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0763798491e-02, 3.6568229092e-01, 6.9204318282e-01},
      doubles_t{1.7261118000e+04, 2.6142239000e+03, 5.7525356000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1061850330e-01, 7.2787102170e-01, 3.3960501013e-01},
      doubles_t{7.6572152000e+02, 7.5195756000e+01, 3.1381854000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7987151173e-01, 8.9311333741e-01, 2.6628261116e-01},
      doubles_t{6.7475838000e+01, 1.2438016000e+01, 5.3575335000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7592051284e-01, 8.4309162880e-01, 3.8507601315e-01},
      doubles_t{1.1413568000e+01, 2.7973046000e+00, 1.3446362000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5541069492e-01, 8.2582648820e-01, 3.6598619477e-01},
      doubles_t{2.2097198000e+00, 4.3697320000e-01, 1.9857830000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0045140954e-01, 6.8440323256e-01, 4.4887292136e-01},
      doubles_t{2.2452750000e-01, 4.4843200000e-02, 1.8969800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.9631698410e-02, 4.2026249161e-01, 6.4176418719e-01},
      doubles_t{1.1410638000e+03, 2.6781001000e+02, 8.0147542000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.3280700463e-02, 3.9708310552e-01, 6.6994930931e-01},
      doubles_t{1.5936103000e+02, 2.9022085000e+01, 1.1568460000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.4385280957e-01, 5.5760901203e-01, 7.1900601551e-02},
      doubles_t{4.8235492000e+00, 2.1015449000e+00, 7.8594490000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.4539602240e-01, 5.3350102684e-01, 1.0279210517e-01},
      doubles_t{6.6808890000e-01, 2.8892840000e-01, 1.1363080000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1183430707e-01, 4.7794313021e-01, 5.9189223741e-01},
      doubles_t{1.6413350000e+02, 4.6508119000e+01, 1.5198705000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7856150676e-01, 5.8716261426e-01, 2.9498380716e-01},
      doubles_t{8.4807186000e+00, 3.1599453000e+00, 1.2103814000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.0973603874e-02, 3.1390031502e-01, 5.2328382504e-01,
                           4.4268362118e-01},
                 doubles_t{2.6139561000e+01, 7.7491838000e+00, 2.5050383000e+00,
                           7.3333940000e-01}));
    return abs_t(name, 58, r0, shells.begin(), shells.end());
} // mini_58

} // namespace chemcache
