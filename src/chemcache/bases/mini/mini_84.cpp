/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_84() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9739603837e-02, 3.6186712324e-01, 6.9585504469e-01},
      doubles_t{3.6867892000e+04, 5.5815605000e+03, 1.2295467000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1268171028e-01, 7.4610806805e-01, 3.2139512932e-01},
      doubles_t{1.6313133000e+03, 1.6182070000e+02, 6.7853196000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9890840882e-01, 9.1491152699e-01, 2.6002280767e-01},
      doubles_t{1.5133201000e+02, 2.9857813000e+01, 1.2666596000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8209327633e-01, 9.2759384253e-01, 3.0538868108e-01},
      doubles_t{2.9409549000e+01, 7.2021546000e+00, 3.5479184000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8303389585e-01, 9.5315868968e-01, 2.7257929705e-01},
      doubles_t{6.4693577000e+00, 1.4613166000e+00, 6.4491060000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9075529733e-01, 9.9119799091e-01, 1.7289109841e-01},
      doubles_t{1.2428201000e+00, 1.8277500000e-01, 4.3633400000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.4462905733e-02, 4.0773343139e-01, 6.5436295038e-01},
      doubles_t{2.5859828000e+03, 6.1013029000e+02, 1.8448204000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.8256099738e-02, 3.8239559738e-01, 6.8252329532e-01},
      doubles_t{3.4055674000e+02, 7.1276662000e+01, 2.9491315000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0294532308e-01, 5.7152253274e-01, 9.4277205401e-02},
      doubles_t{1.4029785000e+01, 6.4245656000e+00, 2.6492696000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.7811878700e-01, 5.1684728595e-01, 7.1134598066e-02},
      doubles_t{2.3710859000e+00, 1.1111472000e+00, 4.1830070000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.9839519048e-01, 5.2166549004e-01, 7.7046898529e-02},
      doubles_t{2.7680630000e-01, 1.0126190000e-01, 4.0064100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0031160320e-01, 4.6474571482e-01, 6.0127601917e-01},
      doubles_t{4.2170380000e+02, 1.2238581000e+02, 4.1880233000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8355300381e-01, 5.5806330751e-01, 2.9349850395e-01},
      doubles_t{2.5183871000e+01, 1.0214589000e+01, 4.4950523000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.5002651873e-01, 5.8092093108e-01, 2.2315771194e-01},
      doubles_t{3.0692218000e+00, 1.2195410000e+00, 4.4471250000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.6816140609e-01, 5.3550271938e-01, 5.4568861975e-01},
      doubles_t{6.4795841000e+01, 1.9791217000e+01, 6.2541857000e+00}));
    return abs_t(name, 84, r0, shells.begin(), shells.end());
} // mini_84

} // namespace chemcache
