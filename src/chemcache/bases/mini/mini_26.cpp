/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_26() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3528303389e-02, 3.7612522006e-01, 6.8192063637e-01},
      doubles_t{3.3020297000e+03, 4.9932535000e+02, 1.0917229000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0323860435e-01, 6.9558262934e-01, 3.7088691564e-01},
      doubles_t{1.4561613000e+02, 1.3468079000e+01, 5.4624842000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2412451048e-01, 7.1774153356e-01, 4.1486461940e-01},
      doubles_t{1.0736268000e+01, 1.7009576000e+00, 6.5364600000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0833270114e-01, 5.5660470584e-01, 5.1949240545e-01},
      doubles_t{8.1194930000e-01, 7.9673400000e-02, 2.9824500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.2995598383e-02, 4.4733469222e-01, 6.1744918927e-01},
      doubles_t{1.8255775000e+02, 4.1647822000e+01, 1.1857806000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5436950322e-01, 5.7223880724e-01, 2.9867410378e-01},
      doubles_t{4.4051684000e+00, 1.6609361000e+00, 5.9330380000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6941769963e-01, 5.0665179889e-01, 6.1055279866e-01},
      doubles_t{1.1198379000e+01, 2.7235552000e+00, 6.1395520000e-01}));
    return abs_t(name, 26, r0, shells.begin(), shells.end());
} // mini_26

} // namespace chemcache
