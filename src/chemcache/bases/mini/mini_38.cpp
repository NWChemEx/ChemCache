/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_38() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2281803999e-02, 3.7131012384e-01, 6.8644394407e-01},
      doubles_t{7.2154735000e+03, 1.0928519000e+03, 2.3998182000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0746039918e-01, 7.1403329459e-01, 3.5336139732e-01},
      doubles_t{3.2046089000e+02, 3.0742778000e+01, 1.2612079000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4558630407e-01, 7.5564681253e-01, 3.8140410632e-01},
      doubles_t{2.6234117000e+01, 4.4599505000e+00, 1.9839250000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9742302037e-01, 7.3649925044e-01, 4.2981032943e-01},
      doubles_t{3.1962046000e+00, 6.0836650000e-01, 2.6573520000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.9613920794e-01, -6.8888512789e-01, -4.2638611726e-01},
      doubles_t{3.3420180000e-01, 5.1699500000e-02, 2.1749800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.8277202712e-02, 4.3956511350e-01, 6.2206211911e-01},
      doubles_t{4.3456915000e+02, 1.0070360000e+02, 2.9625034000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.8298660733e-01, 5.8968991529e-01, 2.2630170587e-01},
      doubles_t{1.1572090000e+01, 4.5937454000e+00, 1.9060808000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1306867417e-01, 5.4073296619e-01, 1.4030729123e-01},
      doubles_t{9.5506170000e-01, 3.9453920000e-01, 1.5759330000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.4512709818e-01, 5.1306769356e-01, 5.6766399288e-01},
      doubles_t{4.4566115000e+01, 1.1881489000e+01, 3.3875579000e+00}));
    return abs_t(name, 38, r0, shells.begin(), shells.end());
} // mini_38

} // namespace chemcache
