/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_86() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9756299104e-02, 3.6177819458e-01, 6.9588368957e-01},
      doubles_t{3.8634492000e+04, 5.8523360000e+03, 1.2897187000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1268369886e-01, 7.4961039239e-01, 3.1822359677e-01},
      doubles_t{1.7105080000e+03, 1.6955891000e+02, 7.0548371000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0223140015e-01, 9.0424640045e-01, 2.7112340014e-01},
      doubles_t{1.5892829000e+02, 3.1748256000e+01, 1.4197685000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.9298870772e-01, 8.8672171742e-01, 3.5622640700e-01},
      doubles_t{3.0871286000e+01, 7.9177164000e+00, 3.9643042000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-4.3546000764e-01, 9.2683091626e-01, 3.4079030598e-01},
      doubles_t{6.6237042000e+00, 1.7190412000e+00, 7.9915290000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4053579306e-01, 8.1023718350e-01, 3.8448789217e-01},
      doubles_t{1.3421310000e+00, 2.6767370000e-01, 1.0544730000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.3862994544e-02, 4.0610847000e-01, 6.5606295154e-01},
      doubles_t{2.7332176000e+03, 6.4418252000e+02, 1.9494224000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.8668899738e-02, 3.6741699751e-01, 6.9779829526e-01},
      doubles_t{3.6084753000e+02, 7.7080714000e+01, 3.1547775000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-1.1440900205e-01, 5.6880231019e-01, 5.1919010930e-01},
      doubles_t{5.5835907000e+01, 1.2265749000e+01, 5.6389792000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{5.6624127044e-01, 4.6382127578e-01, 3.0274598419e-02},
      doubles_t{2.5027700000e+00, 1.1043323000e+00, 4.1119000000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3210289111e-01, 5.0500958961e-01, 1.5953609672e-01},
      doubles_t{3.8199600000e-01, 1.6039200000e-01, 6.6115700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{9.7900800913e-02, 4.6033450429e-01, 6.0662440565e-01},
      doubles_t{4.5168521000e+02, 1.3110730000e+02, 4.4898191000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8296378838e-01, 5.5864357707e-01, 2.9095098806e-01},
      doubles_t{2.6989804000e+01, 1.0979775000e+01, 4.8990999000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.2180221746e-01, 5.8162003156e-01, 2.3800171291e-01},
      doubles_t{3.6329003000e+00, 1.5131756000e+00, 5.8490620000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.6378130396e-01, 5.3413571291e-01, 5.4697141322e-01},
      doubles_t{7.1255348000e+01, 2.1844942000e+01, 6.9772755000e+00}));
    return abs_t(name, 86, r0, shells.begin(), shells.end());
} // mini_86

} // namespace chemcache
