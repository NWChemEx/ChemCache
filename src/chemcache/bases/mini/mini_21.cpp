/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_21() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.4381099366e-02, 3.7913559627e-01, 6.7903839332e-01},
      doubles_t{2.1211153000e+03, 3.2052014000e+02, 6.9895734000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-9.9766799288e-02, 6.7510869519e-01, 3.9087129721e-01},
      doubles_t{9.2827788000e+01, 8.3661954000e+00, 3.3619693000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2242499830e-01, 7.1393999454e-01, 4.1423979683e-01},
      doubles_t{6.1732210000e+00, 9.5574660000e-01, 3.7934190000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.5025409221e-01, 6.5109696627e-01, 4.4443717697e-01},
      doubles_t{4.5254570000e-01, 5.9684900000e-02, 2.3524100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.5760800369e-02, 4.4825120172e-01, 6.1891040238e-01},
      doubles_t{1.1016022000e+02, 2.4886185000e+01, 6.9221188000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.4038459253e-01, 5.7974558198e-01, 3.0206929061e-01},
      doubles_t{2.3903679000e+00, 9.0248230000e-01, 3.2475570000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6447369499e-01, 4.7878428541e-01, 6.5563888002e-01},
      doubles_t{4.5268370000e+00, 1.0394154000e+00, 2.1850770000e-01}));
    return abs_t(name, 21, r0, shells.begin(), shells.end());
} // mini_21

} // namespace chemcache
