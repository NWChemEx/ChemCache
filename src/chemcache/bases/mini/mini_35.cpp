/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_35() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2417504532e-02, 3.7204142701e-01, 6.8587284980e-01},
      doubles_t{6.1032899000e+03, 9.2369743000e+02, 2.0252031000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0661460256e-01, 7.1337921714e-01, 3.5375530850e-01},
      doubles_t{2.7099649000e+02, 2.5706395000e+01, 1.0501175000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3544581366e-01, 7.5283404368e-01, 3.8016082206e-01},
      doubles_t{2.1859513000e+01, 3.5681587000e+00, 1.5090061000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3632118888e-01, 7.0855306667e-01, 4.3293467963e-01},
      doubles_t{2.3404284000e+00, 3.8825410000e-01, 1.4598990000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.9428098233e-02, 4.4230649126e-01, 6.2000528775e-01},
      doubles_t{3.6049973000e+02, 8.3244591000e+01, 2.4311838000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7675219425e-01, 5.7953468796e-01, 2.4911619483e-01},
      doubles_t{9.4221830000e+00, 3.6771841000e+00, 1.4935778000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.4662849310e-01, 5.4132978922e-01, 2.3476669533e-01},
      doubles_t{6.3454670000e-01, 2.4252800000e-01, 9.0530100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.4966659980e-01, 5.1174749930e-01, 5.7591479921e-01},
      doubles_t{3.3965097000e+01, 8.9008312000e+00, 2.4284360000e+00}));
    return abs_t(name, 35, r0, shells.begin(), shells.end());
} // mini_35

} // namespace chemcache
