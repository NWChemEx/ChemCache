/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_33() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2601100376e-02, 3.7277900224e-01, 6.8518420412e-01},
      doubles_t{5.4076138000e+03, 8.1817436000e+02, 1.7926569000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0604379993e-01, 7.1072189955e-01, 3.5637529977e-01},
      doubles_t{2.3985464000e+02, 2.2649060000e+01, 9.2280039000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3080170896e-01, 7.3257422844e-01, 3.9947691551e-01},
      doubles_t{1.9058432000e+01, 3.0854133000e+00, 1.2727348000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.9835841443e-01, 6.7595124918e-01, 4.4760043256e-01},
      doubles_t{1.8198631000e+00, 2.7883050000e-01, 1.0372930000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.0323698714e-02, 4.4438409367e-01, 6.1839529120e-01},
      doubles_t{3.1502252000e+02, 7.2557901000e+01, 2.1079855000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7284750350e-01, 5.7172220733e-01, 2.6644880342e-01},
      doubles_t{8.1044166000e+00, 3.1282025000e+00, 1.2391193000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.0867208641e-01, 5.6717517503e-01, 2.4107318939e-01},
      doubles_t{4.5260110000e-01, 1.7204400000e-01, 6.5737300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.5449520532e-01, 5.1143181761e-01, 5.8219352005e-01},
      doubles_t{2.7437209000e+01, 7.0840440000e+00, 1.8558226000e+00}));
    return abs_t(name, 33, r0, shells.begin(), shells.end());
} // mini_33

} // namespace chemcache
