/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_77() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9859601201e-02, 3.6246910727e-01, 6.9533371396e-01},
      doubles_t{3.0907827000e+04, 4.6769981000e+03, 1.0294994000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1238370003e-01, 7.3963420016e-01, 3.2734030007e-01},
      doubles_t{1.3673566000e+03, 1.3548412000e+02, 5.7389281000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9641139507e-01, 9.0696858490e-01, 2.6395319561e-01},
      doubles_t{1.2557265000e+02, 2.4514298000e+01, 1.0831887000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6683208586e-01, 8.5188776716e-01, 3.6794578582e-01},
      doubles_t{2.4082749000e+01, 5.7865340000e+00, 2.9424679000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5993979809e-01, 7.2028359619e-01, 4.8257469744e-01},
      doubles_t{4.9603751000e+00, 1.1002150000e+00, 5.0934520000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.6615448829e-01, 5.9081075837e-01, 5.0702566427e-01},
      doubles_t{8.6227730000e-01, 9.7952000000e-02, 3.5987900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5192904754e-02, 4.1023342594e-01, 6.5227884124e-01},
      doubles_t{2.1451999000e+03, 5.0478331000e+02, 1.5203985000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7380701832e-02, 3.8626311893e-01, 6.7966483332e-01},
      doubles_t{2.8416628000e+02, 5.8149227000e+01, 2.3772619000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.8479661395e-01, 5.7383302081e-01, 1.1325120411e-01},
      doubles_t{1.1374593000e+01, 5.1149536000e+00, 2.2232980000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.9541458433e-01, 5.7035526975e-01, 2.1473058861e-01},
      doubles_t{1.8664367000e+00, 9.1439780000e-01, 3.7323660000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0257749814e-01, 4.6907599149e-01, 5.9829388914e-01},
      doubles_t{3.4065395000e+02, 9.8218233000e+01, 3.3213551000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7951211590e-01, 5.6129163192e-01, 3.0603631740e-01},
      doubles_t{1.9801434000e+01, 7.8062497000e+00, 3.2420460000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.5015469071e-01, 5.5345607945e-01, 3.9225308544e-01},
      doubles_t{2.1418014000e+00, 8.0244680000e-01, 2.5966360000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7466109976e-01, 5.3191649928e-01, 5.6095259924e-01},
      doubles_t{4.6700526000e+01, 1.3898596000e+01, 4.1392565000e+00}));
    return abs_t(name, 77, r0, shells.begin(), shells.end());
} // mini_77

} // namespace chemcache
