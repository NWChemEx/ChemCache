/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_72() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9963499945e-02, 3.6300819967e-01, 6.9486259936e-01},
      doubles_t{2.6969327000e+04, 4.0796473000e+03, 8.9744182000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1198769460e-01, 7.3818076440e-01, 3.2921388412e-01},
      doubles_t{1.1911456000e+03, 1.1787390000e+02, 4.9501542000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9723598430e-01, 8.8678855316e-01, 2.8431738498e-01},
      doubles_t{1.0779325000e+02, 2.1253125000e+01, 9.6602190000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5103409796e-01, 7.9778429535e-01, 4.0523459764e-01},
      doubles_t{2.0900824000e+01, 4.8004147000e+00, 2.5851469000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1024999587e-01, 3.1618708815e-01, 7.5197847181e-01},
      doubles_t{4.8165887000e+00, 9.1909860000e-01, 4.6756460000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{9.6461599347e-02, 4.0449059726e-01, 6.0341149591e-01},
      doubles_t{1.0028075000e+00, 8.4787600000e-02, 3.1465900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5981404350e-02, 4.1224272360e-01, 6.5035013723e-01},
      doubles_t{1.8523764000e+03, 4.3542673000e+02, 1.3087367000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.6532499531e-02, 3.9091499498e-01, 6.7534559133e-01},
      doubles_t{2.4845071000e+02, 4.9377736000e+01, 2.0077755000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.4753439304e-01, 5.5277168892e-01, 1.7422889651e-01},
      doubles_t{9.8265412000e+00, 4.5507968000e+00, 2.1136634000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{5.0264402832e-02, 5.9125073332e-01, 4.4103942485e-01},
      doubles_t{2.0644787000e+00, 9.3120380000e-01, 3.4261920000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0525240615e-01, 4.7340332766e-01, 5.9427473472e-01},
      doubles_t{2.8685428000e+02, 8.2345093000e+01, 2.7632269000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8092878551e-01, 5.6307727097e-01, 3.1261988388e-01},
      doubles_t{1.6251487000e+01, 6.2625999000e+00, 2.4873801000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1250230377e-01, 4.5815191536e-01, 6.1427452059e-01},
      doubles_t{2.0540301000e+00, 6.9039010000e-01, 2.1235880000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.8550641274e-01, 5.3053583643e-01, 5.7381953940e-01},
      doubles_t{3.4279107000e+01, 9.9276463000e+00, 2.7558598000e+00}));
    return abs_t(name, 72, r0, shells.begin(), shells.end());
} // mini_72

} // namespace chemcache
