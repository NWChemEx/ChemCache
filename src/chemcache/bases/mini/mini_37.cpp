/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_37() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2496200495e-02, 3.7195000295e-01, 6.8572930544e-01},
      doubles_t{6.8167225000e+03, 1.0330007000e+03, 2.2690861000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0740039234e-01, 7.0494094973e-01, 3.6226917417e-01},
      doubles_t{3.0283628000e+02, 2.9201467000e+01, 1.2082845000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4305179055e-01, 7.3759627133e-01, 3.9884548450e-01},
      doubles_t{2.4692611000e+01, 4.2016508000e+00, 1.8522603000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8063579831e-01, 7.1598399570e-01, 4.4029339736e-01},
      doubles_t{2.9359876000e+00, 5.2542640000e-01, 2.1916890000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.5809680595e-01, -6.8551442580e-01, -4.1914931577e-01},
      doubles_t{1.9166790000e-01, 3.3436600000e-02, 1.4733500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.9005302596e-02, 4.4113701287e-01, 6.2043301810e-01},
      doubles_t{4.0786841000e+02, 9.4455492000e+01, 2.7745510000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.8678141493e-01, 5.8636603052e-01, 2.2774781185e-01},
      doubles_t{1.0715052000e+01, 4.2311626000e+00, 1.7434701000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.7965379965e-01, 5.3705929951e-01, 1.8690769983e-01},
      doubles_t{8.4991900000e-01, 3.4353370000e-01, 1.3941050000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.4660370070e-01, 5.1272520245e-01, 5.6998040272e-01},
      doubles_t{4.0866031000e+01, 1.0840885000e+01, 3.0508341000e+00}));
    return abs_t(name, 37, r0, shells.begin(), shells.end());
} // mini_37

} // namespace chemcache
