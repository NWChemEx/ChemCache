/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_44() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1604898984e-02, 3.6898399391e-01, 6.8884548864e-01},
      doubles_t{9.7861429000e+03, 1.4814714000e+03, 3.2540260000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0860559936e-01, 7.2222919573e-01, 3.4516299796e-01},
      doubles_t{4.3479530000e+02, 4.1918783000e+01, 1.7257795000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.5645130965e-01, 8.3991853161e-01, 3.0271711139e-01},
      doubles_t{3.6735183000e+01, 6.2780444000e+00, 2.7519759000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.2656667039e-01, 8.1680132595e-01, 3.7428696607e-01},
      doubles_t{5.2173878000e+00, 1.0759512000e+00, 4.4710850000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.8643610804e-01, 6.3393632733e-01, 4.5996971983e-01},
      doubles_t{7.9343620000e-01, 7.7422100000e-02, 2.9348400000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.3930601264e-02, 4.3100370649e-01, 6.3181410952e-01},
      doubles_t{6.1323511000e+02, 1.4289492000e+02, 4.2136712000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.9849000327e-02, 4.1843010459e-01, 6.5580810719e-01},
      doubles_t{9.1243693000e+01, 1.4138100000e+01, 5.2568481000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.2594199404e-01, 5.6930768958e-01, 2.0019749634e-01},
      doubles_t{2.0542379000e+00, 8.8489890000e-01, 3.5005920000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2743520381e-01, 4.9537671482e-01, 5.8116681739e-01},
      doubles_t{7.4088526000e+01, 2.0283721000e+01, 6.1778559000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.1895501055e-01, 5.5028842651e-01, 4.6316992231e-01},
      doubles_t{2.8983401000e+00, 9.2735410000e-01, 2.6618990000e-01}));
    return abs_t(name, 44, r0, shells.begin(), shells.end());
} // mini_44

} // namespace chemcache
