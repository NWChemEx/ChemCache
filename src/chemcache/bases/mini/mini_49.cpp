/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_49() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1247599846e-02, 3.6767539908e-01, 6.9013589827e-01},
      doubles_t{1.2214547000e+04, 1.8489136000e+03, 4.0636833000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0965749633e-01, 7.1567857606e-01, 3.5160578824e-01},
      doubles_t{5.4134239000e+02, 5.3018379000e+01, 2.2190283000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.6900272024e-01, 8.3333556269e-01, 3.1620812379e-01},
      doubles_t{4.6414454000e+01, 8.3531661000e+00, 3.8649088000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4393071457e-01, 7.7696273291e-01, 4.2732711810e-01},
      doubles_t{7.1775944000e+00, 1.6214460000e+00, 7.1996920000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0080919990e-01, 6.5999249968e-01, 4.5535449978e-01},
      doubles_t{1.0654870000e+00, 1.4431500000e-01, 5.4587300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.2188599234e-02, 4.2677949602e-01, 6.3576289408e-01},
      doubles_t{7.8186921000e+02, 1.8279818000e+02, 5.4211142000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.1140701597e-02, 4.1334532120e-01, 6.5786153374e-01},
      doubles_t{1.1403634000e+02, 1.8713126000e+01, 7.1660478000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0686840607e-01, 5.4799064286e-01, 1.3232523450e-01},
      doubles_t{2.7963781000e+00, 1.1841215000e+00, 4.8773460000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.6300701161e-01, 5.7331182531e-01, 2.8291781249e-01},
      doubles_t{2.2993400000e-01, 8.3555400000e-02, 3.2498900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2055589556e-01, 4.8849758202e-01, 5.8501897847e-01},
      doubles_t{1.0217356000e+02, 2.8394632000e+01, 8.9248045000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.5085740678e-01, 5.6931131538e-01, 3.8406351038e-01},
      doubles_t{4.5353637000e+00, 1.5371481000e+00, 4.9949230000e-01}));
    return abs_t(name, 49, r0, shells.begin(), shells.end());
} // mini_49

} // namespace chemcache
