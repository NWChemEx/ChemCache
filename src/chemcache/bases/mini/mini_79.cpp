/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_79() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9856000418e-02, 3.6236640253e-01, 6.9539090486e-01},
      doubles_t{3.2538784000e+04, 4.9255753000e+03, 1.0846021000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1251489754e-01, 7.4076808378e-01, 3.2637169285e-01},
      doubles_t{1.4392918000e+03, 1.4287377000e+02, 6.0413806000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9721330196e-01, 9.1026090599e-01, 2.6063260171e-01},
      doubles_t{1.3290783000e+02, 2.5950372000e+01, 1.1561528000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7961761062e-01, 8.4337512360e-01, 3.9027691092e-01},
      doubles_t{2.5227768000e+01, 6.3776449000e+00, 3.1285944000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8456777829e-01, 8.4841035211e-01, 3.8489257828e-01},
      doubles_t{4.9230485000e+00, 1.1881975000e+00, 5.2307150000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0425679127e-01, 6.1804107359e-01, 4.9423607888e-01},
      doubles_t{8.8981020000e-01, 1.0617370000e-01, 3.7881700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.4927400484e-02, 4.0953790265e-01, 6.5290090422e-01},
      doubles_t{2.2683556000e+03, 5.3384887000e+02, 1.6096667000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7528699780e-02, 3.8885289773e-01, 6.7677819604e-01},
      doubles_t{3.0198242000e+02, 6.1409206000e+01, 2.5215656000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0106009806e-01, 5.7433069722e-01, 9.5463499538e-02},
      doubles_t{1.1983824000e+01, 5.3684081000e+00, 2.2381172000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0426840619e-01, 5.1824770793e-01, 1.5561400238e-01},
      doubles_t{1.8782203000e+00, 9.0272770000e-01, 3.7578950000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0170570068e-01, 4.6786690313e-01, 5.9934480400e-01},
      doubles_t{3.6341101000e+02, 1.0488558000e+02, 3.5572000000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8406487252e-01, 5.6172044565e-01, 2.9744957122e-01},
      doubles_t{2.1143756000e+01, 8.3920687000e+00, 3.5488617000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8976660118e-01, 5.6070570228e-01, 3.4431390140e-01},
      doubles_t{2.3358427000e+00, 8.6918220000e-01, 2.8462580000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7172699366e-01, 5.3283458034e-01, 5.5677487946e-01},
      doubles_t{5.1866259000e+01, 1.5554932000e+01, 4.7228707000e+00}));
    return abs_t(name, 79, r0, shells.begin(), shells.end());
} // mini_79

} // namespace chemcache
