/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_45() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1684597771e-02, 3.6905588666e-01, 6.8865187511e-01},
      doubles_t{1.0225249000e+04, 1.5491390000e+03, 3.4056851000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0880059858e-01, 7.2245069059e-01, 3.4497429551e-01},
      doubles_t{4.5517966000e+02, 4.3986950000e+01, 1.8132961000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.5737150513e-01, 8.5170851696e-01, 2.9093760579e-01},
      doubles_t{3.8751877000e+01, 6.6037791000e+00, 2.8952705000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.2665250115e-01, 8.2145610290e-01, 3.7041740131e-01},
      doubles_t{5.6152907000e+00, 1.1613908000e+00, 4.8020130000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.7582530011e-01, 6.0509530039e-01, 4.8427420031e-01},
      doubles_t{8.5451430000e-01, 7.9473000000e-02, 3.0093000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.3735000586e-02, 4.3045080301e-01, 6.3218280442e-01},
      doubles_t{6.4423213000e+02, 1.5028013000e+02, 4.4384507000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.0091698690e-02, 4.1894578177e-01, 6.5464737151e-01},
      doubles_t{9.5833303000e+01, 1.4963302000e+01, 5.6013156000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.6128581471e-01, 5.6226282289e-01, 1.7165210699e-01},
      doubles_t{2.1513076000e+00, 9.0932100000e-01, 3.5848240000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2604770748e-01, 4.9427432933e-01, 5.8154513451e-01},
      doubles_t{7.9284881000e+01, 2.1777632000e+01, 6.6786285000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.2304692316e-01, 5.5339235746e-01, 4.5519324726e-01},
      doubles_t{3.2225210000e+00, 1.0349052000e+00, 2.9821450000e-01}));
    return abs_t(name, 45, r0, shells.begin(), shells.end());
} // mini_45

} // namespace chemcache
