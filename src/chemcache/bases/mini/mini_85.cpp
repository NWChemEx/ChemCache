/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_85() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9701601424e-02, 3.6174350863e-01, 6.9598481660e-01},
      doubles_t{3.7776571000e+04, 5.7185732000e+03, 1.2597282000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1275669597e-01, 7.4629977333e-01, 3.2110188852e-01},
      doubles_t{1.6696097000e+03, 1.6583960000e+02, 6.9717694000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9736787456e-01, 9.2019032127e-01, 2.5426117825e-01},
      doubles_t{1.5565678000e+02, 3.0520449000e+01, 1.2699037000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8350860016e-01, 9.3347480038e-01, 3.0078170012e-01},
      doubles_t{3.0256338000e+01, 7.4299444000e+00, 3.6548245000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7670889693e-01, 9.7328169206e-01, 2.5008559796e-01},
      doubles_t{6.7990670000e+00, 1.5270767000e+00, 6.6035700000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8653442323e-01, 1.0102327293e+00, 1.5890265743e-01},
      doubles_t{1.3540229000e+00, 2.0700630000e-01, 4.4678500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.4264596663e-02, 4.0736038170e-01, 6.5480087058e-01},
      doubles_t{2.6553837000e+03, 6.2633825000e+02, 1.8939113000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.8432001169e-02, 3.8063101157e-01, 6.8439422081e-01},
      doubles_t{3.4649889000e+02, 7.3495813000e+01, 3.0402772000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1384761130e-01, 5.6763621550e-01, 8.6567102363e-02},
      doubles_t{1.4334294000e+01, 6.5437078000e+00, 2.6726334000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.9406290469e-01, 5.0999570484e-01, 5.9619500566e-02},
      doubles_t{2.4797553000e+00, 1.1577118000e+00, 4.2831960000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{5.5411280311e-01, 4.8499330272e-01, 5.5990900314e-02},
      doubles_t{2.9831650000e-01, 1.0695340000e-01, 4.1023700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{9.9913100068e-02, 4.6383970031e-01, 6.0203340041e-01},
      doubles_t{4.3427898000e+02, 1.2615550000e+02, 4.3240302000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8238750819e-01, 5.5378941607e-01, 2.9702520862e-01},
      doubles_t{2.6081763000e+01, 1.0651015000e+01, 4.7470935000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.7858679001e-01, 5.7633738479e-01, 1.9152629495e-01},
      doubles_t{3.1664963000e+00, 1.2549894000e+00, 4.7297910000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.6703269534e-01, 5.3578348503e-01, 5.4450858479e-01},
      doubles_t{6.7670974000e+01, 2.0720618000e+01, 6.5872235000e+00}));
    return abs_t(name, 85, r0, shells.begin(), shells.end());
} // mini_85

} // namespace chemcache
