/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_39() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1881802075e-02, 3.7015701241e-01, 6.8780172306e-01},
      doubles_t{7.6476932000e+03, 1.1570020000e+03, 2.5375700000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0757859772e-01, 7.1816628477e-01, 3.4908419260e-01},
      doubles_t{3.3910364000e+02, 3.2403264000e+01, 1.3281887000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4570490212e-01, 7.8783230679e-01, 3.4889070301e-01},
      doubles_t{2.7996257000e+01, 4.6829212000e+00, 2.0566163000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0006049783e-01, 7.8587149432e-01, 3.8575439721e-01},
      doubles_t{3.4864304000e+00, 6.6744510000e-01, 2.7959700000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4389800555e-01, 7.5763961725e-01, 3.4750360791e-01},
      doubles_t{4.6867230000e-01, 4.9780500000e-02, 2.0408200000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.7000194057e-02, 4.3701227015e-01, 6.2509565730e-01},
      doubles_t{4.6462389000e+02, 1.0754806000e+02, 3.1650408000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7884929973e-01, 5.8857429942e-01, 2.2922079978e-01},
      doubles_t{1.2443905000e+01, 4.9934558000e+00, 2.1033868000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0601402186e-01, 5.3208972864e-01, 1.5751460848e-01},
      doubles_t{1.0947920000e+00, 4.6072630000e-01, 1.8428970000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.3670630486e-01, 5.0295921787e-01, 5.7884252057e-01},
      doubles_t{5.0348619000e+01, 1.3497089000e+01, 3.9166237000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.7780189618e-01, 4.6521979002e-01, 5.9164398730e-01},
      doubles_t{1.4046174000e+00, 4.5202590000e-01, 1.2497280000e-01}));
    return abs_t(name, 39, r0, shells.begin(), shells.end());
} // mini_39

} // namespace chemcache
