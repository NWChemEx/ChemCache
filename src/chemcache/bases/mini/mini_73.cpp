/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_73() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0013001168e-02, 3.6308960706e-01, 6.9471371352e-01},
      doubles_t{2.7707063000e+04, 4.1922778000e+03, 9.2272356000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1207430331e-01, 7.3736762176e-01, 3.3023710975e-01},
      doubles_t{1.2259011000e+03, 1.2142987000e+02, 5.0889951000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9680408770e-01, 8.9765786279e-01, 2.7142518875e-01},
      doubles_t{1.1155105000e+02, 2.1746520000e+01, 1.0030729000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5455721845e-01, 8.1748974255e-01, 3.9007782030e-01},
      doubles_t{2.1501135000e+01, 4.9890210000e+00, 2.6049632000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.7405209213e-01, 3.8664168253e-01, 7.1602566764e-01},
      doubles_t{4.7611306000e+00, 9.7852210000e-01, 4.8069070000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.1338629286e-01, 4.6263337088e-01, 5.3711986619e-01},
      doubles_t{9.7168130000e-01, 8.7159100000e-02, 3.2346000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5884606698e-02, 4.1200173637e-01, 6.5052475742e-01},
      doubles_t{1.9081438000e+03, 4.4862494000e+02, 1.3493024000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.6650698688e-02, 3.8989148604e-01, 6.7633477578e-01},
      doubles_t{2.5483949000e+02, 5.1093731000e+01, 2.0793577000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.6459668664e-01, 5.5712167959e-01, 1.5187559444e-01},
      doubles_t{1.0057908000e+01, 4.5799849000e+00, 2.1300786000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.0929119909e-01, 6.1713029487e-01, 3.5796349702e-01},
      doubles_t{1.9903475000e+00, 8.8952370000e-01, 3.4184440000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0445780094e-01, 4.7227160427e-01, 5.9555150539e-01},
      doubles_t{2.9767187000e+02, 8.5493895000e+01, 2.8722520000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8254868852e-01, 5.6510217703e-01, 3.0721278752e-01},
      doubles_t{1.6876653000e+01, 6.5142030000e+00, 2.6052822000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.3914219660e-01, 5.0657668762e-01, 5.4673828664e-01},
      doubles_t{2.0602332000e+00, 7.0272680000e-01, 2.1834770000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.8298959834e-01, 5.3083469518e-01, 5.7047349482e-01},
      doubles_t{3.6692390000e+01, 1.0694725000e+01, 3.0231809000e+00}));
    return abs_t(name, 73, r0, shells.begin(), shells.end());
} // mini_73

} // namespace chemcache
