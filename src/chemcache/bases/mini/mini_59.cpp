/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_59() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0680997256e-02, 3.6543268348e-01, 6.9231716870e-01},
      doubles_t{1.7886843000e+04, 2.7083926000e+03, 5.9592268000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1071900057e-01, 7.2924660376e-01, 3.3818170174e-01},
      doubles_t{7.9303026000e+02, 7.7889637000e+01, 3.2526404000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8091371436e-01, 8.9596564580e-01, 2.6415821350e-01},
      doubles_t{7.0100725000e+01, 1.2959578000e+01, 5.5771203000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7489411502e-01, 8.5464783425e-01, 3.7331351496e-01},
      doubles_t{1.1952788000e+01, 2.9175114000e+00, 1.3900121000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5160559117e-01, 8.2312387932e-01, 3.6868079074e-01},
      doubles_t{2.3097738000e+00, 4.5748950000e-01, 2.0271970000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0475179532e-01, 6.6911178470e-01, 4.6378748940e-01},
      doubles_t{2.3370800000e-01, 4.6054800000e-02, 1.9776800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.8751600007e-02, 4.1865100004e-01, 6.4393890006e-01},
      doubles_t{1.1917574000e+03, 2.7946559000e+02, 8.3496655000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.3869998370e-02, 3.9504698099e-01, 6.7192946766e-01},
      doubles_t{1.6474089000e+02, 3.0359081000e+01, 1.2121698000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3214629482e-01, 5.6113559327e-01, 8.0138299039e-02},
      doubles_t{5.1385128000e+00, 2.2538269000e+00, 8.7313770000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.4226674754e-01, 5.3368785737e-01, 1.0663281146e-01},
      doubles_t{7.0148490000e-01, 3.0047370000e-01, 1.2131010000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1131580616e-01, 4.7779752646e-01, 5.9172503276e-01},
      doubles_t{1.7177896000e+02, 4.8703353000e+01, 1.5963562000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8098059083e-01, 5.8693428085e-01, 2.9285379045e-01},
      doubles_t{8.9281848000e+00, 3.3319930000e+00, 1.2748513000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.4252600048e-02, 3.2158520018e-01, 5.2395770030e-01,
                           4.2939410024e-01},
                 doubles_t{2.7475121000e+01, 8.1971451000e+00, 2.6760726000e+00,
                           7.9088720000e-01}));
    return abs_t(name, 59, r0, shells.begin(), shells.end());
} // mini_59

} // namespace chemcache
