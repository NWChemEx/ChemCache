/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_53() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1002801211e-02, 3.6663980728e-01, 6.9113061372e-01},
      doubles_t{1.4351186000e+04, 2.1730741000e+03, 4.7787205000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1008190081e-01, 7.2194640533e-01, 3.4547750255e-01},
      doubles_t{6.3628295000e+02, 6.2368944000e+01, 2.6035562000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7541130332e-01, 8.5435041029e-01, 3.0064730362e-01},
      doubles_t{5.5135577000e+01, 1.0126452000e+01, 4.5928632000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6304771120e-01, 8.2797632554e-01, 3.8942091201e-01},
      doubles_t{8.9049791000e+00, 2.0925689000e+00, 9.7358990000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.9676529343e-01, -7.5833348322e-01, -4.0670869100e-01},
      doubles_t{1.5539994000e+00, 2.7488090000e-01, 1.0826670000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.1092800832e-02, 4.2315100434e-01, 6.3856740655e-01},
      doubles_t{9.3348281000e+02, 2.1850559000e+02, 6.5325776000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.8346500229e-02, 4.6222700373e-01, 6.0465030488e-01},
      doubles_t{1.5848285000e+02, 2.1215135000e+01, 8.4623149000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.2106196926e-01, 5.4271566037e-01, 1.1087839190e-01},
      doubles_t{3.6295595000e+00, 1.6133740000e+00, 7.0733880000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.8146738959e-01, 5.3219258548e-01, 1.9220319476e-01},
      doubles_t{4.2307580000e-01, 1.7128390000e-01, 6.8479100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1586360435e-01, 4.8204941811e-01, 5.8944482215e-01},
      doubles_t{1.2809026000e+02, 3.5982378000e+01, 1.1551116000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.6818170603e-01, 5.8006141305e-01, 3.2622630734e-01},
      doubles_t{6.1461523000e+00, 2.2209370000e+00, 8.0991200000e-01}));
    return abs_t(name, 53, r0, shells.begin(), shells.end());
} // mini_53

} // namespace chemcache
