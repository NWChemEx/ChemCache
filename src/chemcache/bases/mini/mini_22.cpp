/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_22() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.4170802408e-02, 3.7838191420e-01, 6.7976272551e-01},
      doubles_t{2.3367153000e+03, 3.5315331000e+02, 7.7059812000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0056370342e-01, 6.8158962320e-01, 3.8441021308e-01},
      doubles_t{1.0245710000e+02, 9.2769361000e+00, 3.7368558000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2311740900e-01, 7.1995952903e-01, 4.0946731651e-01},
      doubles_t{7.0008762000e+00, 1.0875122000e+00, 4.2697740000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.4343001449e-01, 6.0300416092e-01, 4.8817554932e-01},
      doubles_t{5.4148020000e-01, 6.6481400000e-02, 2.5764800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.4956899604e-02, 4.4773259813e-01, 6.1887899742e-01},
      doubles_t{1.2333273000e+02, 2.7926218000e+01, 7.8132163000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.4382319992e-01, 5.7814269980e-01, 3.0101089990e-01},
      doubles_t{2.7522804000e+00, 1.0394584000e+00, 3.7298280000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6383190396e-01, 4.9057791185e-01, 6.3622931537e-01},
      doubles_t{5.9418882000e+00, 1.3963895000e+00, 3.0602360000e-01}));
    return abs_t(name, 22, r0, shells.begin(), shells.end());
} // mini_22

} // namespace chemcache
