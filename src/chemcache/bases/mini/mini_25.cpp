/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_25() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3685698365e-02, 3.7666019033e-01, 6.8139588251e-01},
      doubles_t{3.0443379000e+03, 4.6032835000e+02, 1.0060952000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0268050594e-01, 6.9157403998e-01, 3.7474522167e-01},
      doubles_t{1.3404812000e+02, 1.2355650000e+01, 5.0118328000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2396158868e-01, 7.1719696375e-01, 4.1469237904e-01},
      doubles_t{9.7428339000e+00, 1.5375154000e+00, 5.9408090000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1594589905e-01, 5.6383119539e-01, 5.1571049579e-01},
      doubles_t{7.6261460000e-01, 7.8364700000e-02, 2.9301700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.3379800159e-02, 4.4727960076e-01, 6.1787990105e-01},
      doubles_t{1.6673180000e+02, 3.7977416000e+01, 1.0774333000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5007510571e-01, 5.7258611307e-01, 3.0209320690e-01},
      doubles_t{3.9731007000e+00, 1.5014460000e+00, 5.3680590000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6748469657e-01, 5.0411868968e-01, 6.1434918742e-01},
      doubles_t{9.8656162000e+00, 2.3866048000e+00, 5.3817950000e-01}));
    return abs_t(name, 25, r0, shells.begin(), shells.end());
} // mini_25

} // namespace chemcache
