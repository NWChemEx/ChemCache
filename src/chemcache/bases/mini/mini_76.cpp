/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_76() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9864899989e-02, 3.6257689993e-01, 6.9525749987e-01},
      doubles_t{3.0105978000e+04, 4.5546731000e+03, 1.0023444000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1227840007e-01, 7.3975820043e-01, 3.2778090019e-01},
      doubles_t{1.3299061000e+03, 1.3189507000e+02, 5.5352028000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9665990137e-01, 9.0605560420e-01, 2.6524790123e-01},
      doubles_t{1.2184431000e+02, 2.3821993000e+01, 1.0499604000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6839012717e-01, 8.2883516112e-01, 3.9289012897e-01},
      doubles_t{2.3220256000e+01, 5.6648299000e+00, 2.8808691000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7210956907e-01, 6.3953894685e-01, 5.6533525301e-01},
      doubles_t{4.6824502000e+00, 1.0770750000e+00, 5.2101140000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-8.1870998380e-03, 5.4411728925e-01, 5.0301919006e-01},
      doubles_t{8.6522670000e-01, 9.5424400000e-02, 3.5059300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5171901291e-02, 4.1030160705e-01, 6.5237261120e-01},
      doubles_t{2.0883111000e+03, 4.9108568000e+02, 1.4776879000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7286800587e-02, 3.8351030604e-01, 6.8282801075e-01},
      doubles_t{2.7266734000e+02, 5.6742347000e+01, 2.3097886000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.8346789086e-01, 5.6583878652e-01, 1.2301059707e-01},
      doubles_t{1.0934214000e+01, 4.9651040000e+00, 2.1875843000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5227851549e-01, 6.0215023698e-01, 2.2790551400e-01},
      doubles_t{1.8723995000e+00, 8.9080140000e-01, 3.5473670000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0287209975e-01, 4.6969009886e-01, 5.9789239855e-01},
      doubles_t{3.3005620000e+02, 9.5019652000e+01, 3.2080580000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8043079867e-01, 5.5933079734e-01, 3.0838379853e-01},
      doubles_t{1.9043432000e+01, 7.4801362000e+00, 3.1008998000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.2752130767e-01, 5.4709911844e-01, 4.1898131412e-01},
      doubles_t{2.0861668000e+00, 7.6997530000e-01, 2.5281530000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7631390662e-01, 5.3165121997e-01, 5.6320012115e-01},
      doubles_t{4.4179317000e+01, 1.3087026000e+01, 3.8529209000e+00}));
    return abs_t(name, 76, r0, shells.begin(), shells.end());
} // mini_76

} // namespace chemcache
