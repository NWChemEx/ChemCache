/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_43() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1694699041e-02, 3.6930389426e-01, 6.8852138930e-01},
      doubles_t{9.3318660000e+03, 1.4127444000e+03, 3.1028294000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0844380123e-01, 7.2061250817e-01, 3.4673950393e-01},
      doubles_t{4.1456635000e+02, 3.9944899000e+01, 1.6451697000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.5456509422e-01, 8.2760658119e-01, 3.1380419287e-01},
      doubles_t{3.4887843000e+01, 5.9470507000e+00, 2.6240416000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.2415709580e-01, 8.1516548943e-01, 3.7333289516e-01},
      doubles_t{4.8541288000e+00, 9.8792520000e-01, 4.1093100000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.9673910254e-01, 6.5794500849e-01, 4.4293580571e-01},
      doubles_t{7.1023290000e-01, 7.5803200000e-02, 2.8687600000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.4532601079e-02, 4.3219140552e-01, 6.3049000805e-01},
      doubles_t{5.8094360000e+02, 1.3536036000e+02, 3.9889938000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.9552300326e-02, 4.2014190463e-01, 6.5477260722e-01},
      doubles_t{8.7347195000e+01, 1.3287886000e+01, 4.9090562000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.0116797467e-01, 5.6886825216e-01, 2.2526288106e-01},
      doubles_t{1.9258524000e+00, 8.4385560000e-01, 3.3618540000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2902970755e-01, 4.9668782906e-01, 5.8058873397e-01},
      doubles_t{6.9016818000e+01, 1.8830107000e+01, 5.6925288000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.0787268989e-01, 5.4397007354e-01, 4.8049627663e-01},
      doubles_t{2.6360931000e+00, 8.4019530000e-01, 2.3965140000e-01}));
    return abs_t(name, 43, r0, shells.begin(), shells.end());
} // mini_43

} // namespace chemcache
