/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_65() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0343896398e-02, 3.6423467826e-01, 6.9355605860e-01},
      doubles_t{2.1835019000e+04, 3.3056159000e+03, 7.2731432000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1156209305e-01, 7.2716515472e-01, 3.3952527886e-01},
      doubles_t{9.6508624000e+02, 9.5681960000e+01, 4.0815799000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9016321156e-01, 8.7877493502e-01, 2.8475021135e-01},
      doubles_t{8.6613515000e+01, 1.6578152000e+01, 7.8003711000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7033236838e-01, 6.5736894386e-01, 5.6303525192e-01},
      doubles_t{1.5775660000e+01, 4.0878441000e+00, 2.1592946000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{3.6219002800e-03, 2.1570881667e-01, 7.9611936154e-01},
      doubles_t{4.8423886000e+00, 7.4714360000e-01, 3.8423130000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{7.6672904263e-02, 2.7829831547e-01, 7.3161914067e-01},
      doubles_t{8.9327640000e-01, 6.9102500000e-02, 2.6286100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.7184704964e-02, 4.1500122669e-01, 6.4768824166e-01},
      doubles_t{1.4802159000e+03, 3.4751808000e+02, 1.0411187000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.5361998711e-02, 3.9209558571e-01, 6.7408177542e-01},
      doubles_t{2.0260666000e+02, 3.8524834000e+01, 1.5570199000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.9837712182e-01, 5.5071634027e-01, 2.2420481639e-01},
      doubles_t{7.7988359000e+00, 3.7575148000e+00, 1.7630710000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.2195999110e-03, 5.5312759400e-01, 5.1783209438e-01},
      doubles_t{2.1015281000e+00, 7.8244620000e-01, 2.7860510000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0768579756e-01, 4.7528008923e-01, 5.9381548654e-01},
      doubles_t{2.2188313000e+02, 6.3252113000e+01, 2.0957007000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8390409000e-01, 5.7688147968e-01, 3.0018948943e-01},
      doubles_t{1.2013693000e+01, 4.5266838000e+00, 1.7459841000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.0843995940e-02, 3.2148258386e-01, 5.2551477361e-01,
                           4.2973607842e-01},
                 doubles_t{4.0680481000e+01, 1.2337528000e+01, 4.0635453000e+00,
                           1.1838629000e+00}));
    return abs_t(name, 65, r0, shells.begin(), shells.end());
} // mini_65

} // namespace chemcache
