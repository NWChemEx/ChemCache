/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_51() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0984299996e-02, 3.6684869998e-01, 6.9105009996e-01},
      doubles_t{1.3289383000e+04, 2.0105218000e+03, 4.4169815000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0983649457e-01, 7.2038906442e-01, 3.4686738287e-01},
      doubles_t{5.8838790000e+02, 5.7523192000e+01, 2.4036693000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7143421252e-01, 8.5479713941e-01, 2.9648471367e-01},
      doubles_t{5.0787743000e+01, 9.1473306000e+00, 4.1723695000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5122042348e-01, 8.1210055428e-01, 3.9800492660e-01},
      doubles_t{7.9995999000e+00, 1.8381194000e+00, 8.3126330000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7147278378e-01, 6.6824126008e-01, 4.7253047177e-01},
      doubles_t{1.3445260000e+00, 2.1146840000e-01, 8.6891400000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.0975801839e-02, 4.2414870963e-01, 6.3872571451e-01},
      doubles_t{8.6008072000e+02, 2.0101421000e+02, 5.9657596000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.1811197752e-02, 4.0455877141e-01, 6.6537485297e-01},
      doubles_t{1.2227109000e+02, 2.0929665000e+01, 8.0980350000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.8895190730e-01, 5.6404951059e-01, 1.2892870242e-01},
      doubles_t{3.3003687000e+00, 1.4287737000e+00, 5.9505130000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.1109099963e-01, 5.6525799933e-01, 2.2573579973e-01},
      doubles_t{3.2801850000e-01, 1.3661290000e-01, 5.4113700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1662790380e-01, 4.8343631577e-01, 5.9013951924e-01},
      doubles_t{1.1580955000e+02, 3.2305835000e+01, 1.0250328000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.4836559687e-01, 5.7431539276e-01, 3.6430439541e-01},
      doubles_t{5.4862102000e+00, 1.9216196000e+00, 6.6606260000e-01}));
    return abs_t(name, 51, r0, shells.begin(), shells.end());
} // mini_51

} // namespace chemcache
