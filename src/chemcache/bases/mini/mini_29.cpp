/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_29() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3136495841e-02, 3.7479287531e-01, 6.8320945500e-01},
      doubles_t{4.1375632000e+03, 6.2573294000e+02, 1.3695969000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0468610413e-01, 7.0348402778e-01, 3.6342811435e-01},
      doubles_t{1.8310510000e+02, 1.7122418000e+01, 6.9491752000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2396339508e-01, 7.1130328436e-01, 4.2270149071e-01},
      doubles_t{1.3999937000e+01, 2.2431225000e+00, 8.5310590000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-8.9049396011e-02, 5.3386477609e-01, 5.3807127590e-01},
      doubles_t{8.3040540000e-01, 8.5404700000e-02, 3.1819800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.2364299331e-02, 4.4804489676e-01, 6.1558399554e-01},
      doubles_t{2.3362353000e+02, 5.3545569000e+01, 1.5388041000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5931351237e-01, 5.6879502714e-01, 2.9871061425e-01},
      doubles_t{5.8732783000e+00, 2.2084129000e+00, 7.8648340000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.7345349245e-01, 5.1218457770e-01, 6.0201457379e-01},
      doubles_t{1.5586486000e+01, 3.8355780000e+00, 8.6504250000e-01}));
    return abs_t(name, 29, r0, shells.begin(), shells.end());
} // mini_29

} // namespace chemcache
