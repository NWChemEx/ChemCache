/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_71() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9991602029e-02, 3.6316271228e-01, 6.9472362350e-01},
      doubles_t{2.6213072000e+04, 3.9645756000e+03, 8.7202321000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1207020282e-01, 7.3241061845e-01, 3.3429240842e-01},
      doubles_t{1.1596313000e+03, 1.1482931000e+02, 4.8944774000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9442350984e-01, 8.8620652961e-01, 2.8184230942e-01},
      doubles_t{1.0517731000e+02, 2.0488594000e+01, 9.4407118000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4841809936e-01, 7.6362059860e-01, 4.3751699920e-01},
      doubles_t{2.0292410000e+01, 4.6894803000e+00, 2.5387204000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-4.2818399488e-02, 2.5623229694e-01, 7.7869119069e-01},
      doubles_t{5.0301304000e+00, 8.8480790000e-01, 4.4784710000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{8.1952004779e-02, 3.2767361911e-01, 6.8431553990e-01},
      doubles_t{1.0345315000e+00, 8.2448700000e-02, 3.0597900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.6203399752e-02, 4.1279369866e-01, 6.4978929789e-01},
      doubles_t{1.7955607000e+03, 4.2201312000e+02, 1.2679229000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.6324501433e-02, 3.9121591543e-01, 6.7517242663e-01},
      doubles_t{2.4023172000e+02, 4.7779063000e+01, 1.9398857000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.3602591715e-01, 5.5914852854e-01, 1.8071470922e-01},
      doubles_t{9.5967927000e+00, 4.4367903000e+00, 2.0246813000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0973201794e-02, 5.6057932455e-01, 4.8128062107e-01},
      doubles_t{2.1297889000e+00, 8.9173210000e-01, 3.2974500000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0553010722e-01, 4.7386863241e-01, 5.9410714063e-01},
      doubles_t{2.7718839000e+02, 7.9463212000e+01, 2.6610039000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8055179575e-01, 5.6605699144e-01, 3.1273369527e-01},
      doubles_t{1.5600726000e+01, 5.9803128000e+00, 2.3344255000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{8.7083497623e-02, 3.9900608911e-01, 6.9004838117e-01},
      doubles_t{2.0469529000e+00, 6.8141560000e-01, 2.0136950000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.8895429327e-01, 5.2993058113e-01, 5.7691407945e-01},
      doubles_t{3.1797464000e+01, 9.1472500000e+00, 2.4942441000e+00}));
    return abs_t(name, 71, r0, shells.begin(), shells.end());
} // mini_71

} // namespace chemcache
