/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_63() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0352601134e-02, 3.6442630685e-01, 6.9343131303e-01},
      doubles_t{2.0507003000e+04, 3.1028009000e+03, 6.8235369000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1133759692e-01, 7.2534967992e-01, 3.4143649055e-01},
      doubles_t{9.0788537000e+02, 8.9668374000e+01, 3.8112692000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8938750355e-01, 8.5014311044e-01, 3.1402860386e-01},
      doubles_t{8.0647184000e+01, 1.5647728000e+01, 7.4065456000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.9140349293e-01, 5.7563128960e-01, 6.6014928808e-01},
      doubles_t{1.4082371000e+01, 3.9851714000e+00, 2.1380518000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-4.1772997740e-03, 2.3462918732e-01, 7.8227165774e-01},
      doubles_t{4.5489800000e+00, 7.0187290000e-01, 3.5287490000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-8.1989400034e-02, -3.1654550013e-01, -6.9356230029e-01},
      doubles_t{8.3915120000e-01, 6.4915500000e-02, 2.4693400000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.7375997751e-02, 4.1573548792e-01, 6.4718398119e-01},
      doubles_t{1.3845829000e+03, 3.2459262000e+02, 9.7074434000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.5054298705e-02, 3.8950848561e-01, 6.7678067500e-01},
      doubles_t{1.8869784000e+02, 3.5858186000e+01, 1.4439022000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.0017909411e-01, 5.3303588954e-01, 2.3837209532e-01},
      doubles_t{7.0626748000e+00, 3.4820688000e+00, 1.6742596000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-1.2373100342e-02, 5.3328381476e-01, 5.5205931528e-01},
      doubles_t{1.9741929000e+00, 7.7456120000e-01, 2.7333190000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0766010217e-01, 4.7447270956e-01, 5.9561811200e-01},
      doubles_t{2.0592120000e+02, 5.8526401000e+01, 1.9299158000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7997850117e-01, 5.7965190242e-01, 3.0149550126e-01},
      doubles_t{1.1011484000e+01, 4.1362487000e+00, 1.5896167000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{7.8595106317e-02, 3.1405442524e-01, 5.2584414227e-01,
                           4.3420823490e-01},
                 doubles_t{3.7125837000e+01, 1.1248423000e+01, 3.7191113000e+00,
                           1.0960099000e+00}));
    return abs_t(name, 63, r0, shells.begin(), shells.end());
} // mini_63

} // namespace chemcache
