/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_50() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1135299595e-02, 3.6729289757e-01, 6.9054469542e-01},
      doubles_t{1.2741674000e+04, 1.9284692000e+03, 4.2380797000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0974880416e-01, 7.1811202718e-01, 3.4909731321e-01},
      doubles_t{5.6468220000e+02, 5.5241831000e+01, 2.3121421000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7089840786e-01, 8.4090642438e-01, 3.1010300899e-01},
      doubles_t{4.8493098000e+01, 8.7703153000e+00, 4.0378104000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4756561762e-01, 7.9375834023e-01, 4.1320062094e-01},
      doubles_t{7.6154955000e+00, 1.7298929000e+00, 7.7188810000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3855889234e-01, 7.0598607734e-01, 4.2361238641e-01},
      doubles_t{1.1976547000e+00, 1.7303680000e-01, 6.6959500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.2072896504e-02, 4.2643308184e-01, 6.3590157291e-01},
      doubles_t{8.1677323000e+02, 1.9112772000e+02, 5.6771595000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.1564299808e-02, 4.1516669748e-01, 6.5499309603e-01},
      doubles_t{1.2124487000e+02, 1.9577904000e+01, 7.5717131000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.9826698669e-01, 5.5577918143e-01, 1.3013949565e-01},
      doubles_t{3.0474031000e+00, 1.3022184000e+00, 5.4462910000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.2109060400e-01, 5.6590430705e-01, 2.2181150276e-01},
      doubles_t{2.6752860000e-01, 1.0418250000e-01, 4.1626000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1982370200e-01, 4.8759100815e-01, 5.8498740978e-01},
      doubles_t{1.0805630000e+02, 3.0131576000e+01, 9.5300359000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.5294870352e-01, 5.7276120798e-01, 3.6903870514e-01},
      doubles_t{4.9626098000e+00, 1.7120829000e+00, 5.7719450000e-01}));
    return abs_t(name, 50, r0, shells.begin(), shells.end());
} // mini_50

} // namespace chemcache
