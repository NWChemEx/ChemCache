/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_36() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2539800127e-02, 3.7210750076e-01, 6.8561070140e-01},
      doubles_t{6.4466307000e+03, 9.7687570000e+02, 2.1447955000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0689330293e-01, 7.1394931955e-01, 3.5329140968e-01},
      doubles_t{2.8701158000e+02, 2.7328672000e+01, 1.1174440000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3768408755e-01, 7.6984875966e-01, 3.6411188092e-01},
      doubles_t{2.3331340000e+01, 3.8133080000e+00, 1.6134940000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4985938832e-01, 7.1287826669e-01, 4.3610107962e-01},
      doubles_t{2.5964926000e+00, 4.4909000000e-01, 1.7012360000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.9028796987e-02, 4.4133158507e-01, 6.2074157900e-01},
      doubles_t{3.8437950000e+02, 8.8868156000e+01, 2.6019696000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7454489445e-01, 5.8133338825e-01, 2.4708199501e-01},
      doubles_t{1.0184792000e+01, 4.0094356000e+00, 1.6459659000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.6200552674e-01, 5.3520203954e-01, 2.2420071656e-01},
      doubles_t{7.2962570000e-01, 2.8060560000e-01, 1.0521390000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.4794660535e-01, 5.1217191852e-01, 5.7294982072e-01},
      doubles_t{3.7368103000e+01, 9.8543131000e+00, 2.7327955000e+00}));
    return abs_t(name, 36, r0, shells.begin(), shells.end());
} // mini_36

} // namespace chemcache
