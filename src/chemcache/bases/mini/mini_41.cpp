/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_41() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1814398831e-02, 3.6982979301e-01, 6.8804738699e-01},
      doubles_t{8.4650874000e+03, 1.2811163000e+03, 2.8121159000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0801310258e-01, 7.1999381723e-01, 3.4726570831e-01},
      doubles_t{3.7585025000e+02, 3.6053370000e+01, 1.4816642000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4997739695e-01, 8.1563279004e-01, 3.2329369605e-01},
      doubles_t{3.1365510000e+01, 5.2718932000e+00, 2.3070864000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.1632607850e-01, 8.0734214514e-01, 3.7407287458e-01},
      doubles_t{4.1677904000e+00, 8.2155840000e-01, 3.4324950000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2246728773e-01, 7.0485206114e-01, 4.0266997780e-01},
      doubles_t{5.8716700000e-01, 6.6167000000e-02, 2.5934700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.6523798000e-02, 4.3571478993e-01, 6.2587858553e-01},
      doubles_t{5.1928752000e+02, 1.2045899000e+02, 3.5608105000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.8674358598e-01, 5.9757327078e-01, 2.0963058975e-01},
      doubles_t{1.3976575000e+01, 5.6388612000e+00, 2.3712274000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3087492215e-01, 5.2156402681e-01, 1.4048430722e-01},
      doubles_t{1.3455223000e+00, 5.6846750000e-01, 2.2696230000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.3355959190e-01, 5.0062536962e-01, 5.7767906495e-01},
      doubles_t{5.9035804000e+01, 1.5997120000e+01, 4.7574796000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.0159019325e-01, 5.2716808235e-01, 5.0657448304e-01},
      doubles_t{1.9792676000e+00, 6.2926190000e-01, 1.7752290000e-01}));
    return abs_t(name, 41, r0, shells.begin(), shells.end());
} // mini_41

} // namespace chemcache
