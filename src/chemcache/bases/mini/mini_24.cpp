/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_24() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3791602348e-02, 3.7707721388e-01, 6.8103642507e-01},
      doubles_t{2.7997104000e+03, 4.2321821000e+02, 9.2434349000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0195979978e-01, 6.9250119849e-01, 3.7370909919e-01},
      doubles_t{1.2322634000e+02, 1.1246630000e+01, 4.5372546000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2358411076e-01, 7.1755203454e-01, 4.1362691991e-01},
      doubles_t{8.7804852000e+00, 1.3793596000e+00, 5.3502320000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.2948039282e-01, 5.7117736833e-01, 5.1261177157e-01},
      doubles_t{7.2655880000e-01, 7.6390200000e-02, 2.8604800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.4060093916e-02, 4.4778277104e-01, 6.1765316005e-01},
      doubles_t{1.5128977000e+02, 3.4410311000e+01, 9.7258583000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5811109518e-01, 5.7573238924e-01, 2.9089059456e-01},
      doubles_t{3.4776582000e+00, 1.3079405000e+00, 4.6753230000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6471780326e-01, 5.0113710992e-01, 6.1805871224e-01},
      doubles_t{8.6262099000e+00, 2.0754716000e+00, 4.7058740000e-01}));
    return abs_t(name, 24, r0, shells.begin(), shells.end());
} // mini_24

} // namespace chemcache
