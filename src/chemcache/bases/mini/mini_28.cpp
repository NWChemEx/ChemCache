/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_28() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3246205341e-02, 3.7517373168e-01, 6.8284945767e-01},
      doubles_t{3.8492417000e+03, 5.8208183000e+02, 1.2735676000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0423429520e-01, 7.0123276768e-01, 3.6551628316e-01},
      doubles_t{1.7011363000e+02, 1.5852695000e+01, 6.4342950000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2361279392e-01, 7.1801888047e-01, 4.1517858871e-01},
      doubles_t{1.2889647000e+01, 2.0461387000e+00, 7.7923390000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-9.3859003832e-02, 5.5128752251e-01, 5.2117002128e-01},
      doubles_t{8.4339750000e-01, 8.2474600000e-02, 3.0735000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.2503800276e-02, 4.4771200134e-01, 6.1629270184e-01},
      doubles_t{2.1601321000e+02, 4.9433819000e+01, 1.4166185000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5524169499e-01, 5.6849738884e-01, 3.0238609407e-01},
      doubles_t{5.3861988000e+00, 2.0323051000e+00, 7.2556760000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.7190930258e-01, 5.1029390765e-01, 6.0524300907e-01},
      doubles_t{1.4087823000e+01, 3.4535186000e+00, 7.7782390000e-01}));
    return abs_t(name, 28, r0, shells.begin(), shells.end());
} // mini_28

} // namespace chemcache
