/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_42() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1710602407e-02, 3.6946391441e-01, 6.8842012686e-01},
      doubles_t{8.8989752000e+03, 1.3466930000e+03, 2.9562876000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0821979756e-01, 7.2050798377e-01, 3.4681759219e-01},
      doubles_t{3.9508162000e+02, 3.7964578000e+01, 1.5608898000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.5262329907e-01, 8.1771639698e-01, 3.2256749881e-01},
      doubles_t{3.3085228000e+01, 5.6180351000e+00, 2.4825318000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.2064220062e-01, 8.0925390157e-01, 3.7635880073e-01},
      doubles_t{4.5000086000e+00, 9.0593940000e-01, 3.7777340000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.1168150333e-01, 6.8649461080e-01, 4.1875490659e-01},
      doubles_t{6.5419460000e-01, 7.2581000000e-02, 2.7971800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.6066499076e-02, 4.3466979533e-01, 6.2687369327e-01},
      doubles_t{5.4886388000e+02, 1.2739268000e+02, 3.7712842000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.9170259310e-01, 6.0203208576e-01, 1.9915459529e-01},
      doubles_t{1.4744588000e+01, 5.9600351000e+00, 2.4937534000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.5183146882e-01, 5.1726126430e-01, 1.2321819150e-01},
      doubles_t{1.4621554000e+00, 6.0827580000e-01, 2.3912470000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.3163169755e-01, 4.9907469070e-01, 5.7826358922e-01},
      doubles_t{6.3792046000e+01, 1.7356419000e+01, 5.2109516000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.0725190662e-01, 5.3960991724e-01, 4.8462391549e-01},
      doubles_t{2.2861428000e+00, 7.2931950000e-01, 2.0941560000e-01}));
    return abs_t(name, 42, r0, shells.begin(), shells.end());
} // mini_42

} // namespace chemcache
