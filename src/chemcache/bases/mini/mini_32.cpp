/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_32() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2724900856e-02, 3.7316710509e-01, 6.8478670935e-01},
      doubles_t{5.0737499000e+03, 7.6772417000e+02, 1.6818881000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0570960523e-01, 7.0945923512e-01, 3.5755861770e-01},
      doubles_t{2.2498366000e+02, 2.1187659000e+01, 8.6256370000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2805768512e-01, 7.2505435269e-01, 4.0645057348e-01},
      doubles_t{1.7764305000e+01, 2.8551503000e+00, 1.1585827000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.7691080417e-01, 6.6044201558e-01, 4.5254691068e-01},
      doubles_t{1.5859493000e+00, 2.2692410000e-01, 8.3724900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.0697507323e-02, 4.4519403594e-01, 6.1789404989e-01},
      doubles_t{2.9373174000e+02, 6.7552546000e+01, 1.9568631000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7516380107e-01, 5.7033530223e-01, 2.6903210105e-01},
      doubles_t{7.4326168000e+00, 2.8426842000e+00, 1.1041168000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.6277538751e-01, 5.7012357291e-01, 2.9017368621e-01},
      doubles_t{3.8224140000e-01, 1.4147300000e-01, 5.2627600000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.5779849939e-01, 5.1149219802e-01, 5.8577029773e-01},
      doubles_t{2.4321421000e+01, 6.2238135000e+00, 1.5887375000e+00}));
    return abs_t(name, 32, r0, shells.begin(), shells.end());
} // mini_32

} // namespace chemcache
