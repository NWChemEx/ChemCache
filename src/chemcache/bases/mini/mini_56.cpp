/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_56() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0719900493e-02, 3.6574750297e-01, 6.9209630562e-01},
      doubles_t{1.6098886000e+04, 2.4362960000e+03, 5.3562078000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1033320355e-01, 7.2759232343e-01, 3.3993611095e-01},
      doubles_t{7.1309716000e+02, 6.9806392000e+01, 2.9031078000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7737750314e-01, 8.8679661004e-01, 2.7013250306e-01},
      doubles_t{6.2480417000e+01, 1.1412912000e+01, 4.9805876000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7787200652e-01, 8.4052961451e-01, 3.8877980671e-01},
      doubles_t{1.0265539000e+01, 2.5292321000e+00, 1.2273505000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6328947917e-01, 8.0403375391e-01, 3.9678387725e-01},
      doubles_t{1.9672783000e+00, 4.1058200000e-01, 1.8712750000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0137739428e-01, 7.1545357967e-01, 4.1764338813e-01},
      doubles_t{2.1270740000e-01, 4.1803900000e-02, 1.7684100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.9027095757e-02, 4.1919517750e-01, 6.4375796544e-01},
      doubles_t{1.0653684000e+03, 2.4949087000e+02, 7.4311477000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.3337499782e-02, 3.9223729743e-01, 6.7522699557e-01},
      doubles_t{1.4706367000e+02, 2.6792790000e+01, 1.0604816000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1539373018e-01, 5.6428854100e-01, 9.2372006712e-02},
      doubles_t{4.4335440000e+00, 1.9758409000e+00, 8.1191630000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3032423417e-01, 5.3558774253e-01, 1.1367440903e-01},
      doubles_t{6.1380040000e-01, 2.7282590000e-01, 1.1006560000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1054910056e-01, 4.7505370241e-01, 5.9721320302e-01},
      doubles_t{1.5169168000e+02, 4.2753274000e+01, 1.3850108000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.6439980566e-01, 5.8582961254e-01, 3.1122760666e-01},
      doubles_t{7.7435537000e+00, 2.8709772000e+00, 1.0976557000e+00}));
    return abs_t(name, 56, r0, shells.begin(), shells.end());
} // mini_56

} // namespace chemcache
