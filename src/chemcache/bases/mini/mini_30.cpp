/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_30() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3092804490e-02, 3.7450382665e-01, 6.8341604864e-01},
      doubles_t{4.4322885000e+03, 6.7066012000e+02, 1.4690245000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0508634698e-01, 7.0499971515e-01, 3.6200786182e-01},
      doubles_t{1.9648911000e+02, 1.8441663000e+01, 7.4929688000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2542171138e-01, 7.0967463581e-01, 4.2361692138e-01},
      doubles_t{1.5180864000e+01, 2.4467928000e+00, 9.5293510000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1666929442e-01, 5.9502187155e-01, 4.9233017646e-01},
      doubles_t{1.1210370000e+00, 1.2518380000e-01, 4.4067300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.1949094875e-02, 4.4762877505e-01, 6.1580336568e-01},
      doubles_t{2.5247779000e+02, 5.7934825000e+01, 1.6689667000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.6754520318e-01, 5.7010290678e-01, 2.8562140340e-01},
      doubles_t{6.3410797000e+00, 2.3880503000e+00, 8.7307830000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6725320588e-01, 5.1227901799e-01, 5.9481772089e-01},
      doubles_t{1.8368202000e+01, 4.5913041000e+00, 1.0902026000e+00}));
    return abs_t(name, 30, r0, shells.begin(), shells.end());
} // mini_30

} // namespace chemcache
