/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_52() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1086201833e-02, 3.6696291101e-01, 6.9079442073e-01},
      doubles_t{1.3796560000e+04, 2.0888798000e+03, 4.5939319000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1014410060e-01, 7.1347620389e-01, 3.5344630193e-01},
      doubles_t{6.1158438000e+02, 6.0221194000e+01, 2.5491369000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7283629277e-01, 8.4756397755e-01, 3.0523849191e-01},
      doubles_t{5.3042328000e+01, 9.6632025000e+00, 4.4188576000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5878622366e-01, 8.1128585349e-01, 4.0331162659e-01},
      doubles_t{8.4582805000e+00, 1.9753929000e+00, 9.0818330000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8063700245e-01, 7.5095970657e-01, 4.0389570353e-01},
      doubles_t{1.4270256000e+00, 2.3880220000e-01, 9.3199100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.1109896858e-02, 4.2368238359e-01, 6.3860297526e-01},
      doubles_t{8.9507497000e+02, 2.0957862000e+02, 6.2405210000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.2021000365e-02, 4.1191870470e-01, 6.5710790749e-01},
      doubles_t{1.3144799000e+02, 2.1663180000e+01, 8.4667304000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1593117080e-01, 5.4896046145e-01, 1.1331739204e-01},
      doubles_t{3.4281000000e+00, 1.4943404000e+00, 6.3848520000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.6902539988e-01, 5.3550489982e-01, 2.0118129993e-01},
      doubles_t{3.6614460000e-01, 1.4887870000e-01, 5.9763300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1691359141e-01, 4.8355546448e-01, 5.8838635677e-01},
      doubles_t{1.2140830000e+02, 3.4015217000e+01, 1.0869138000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.6019389495e-01, 5.7977578875e-01, 3.4055799339e-01},
      doubles_t{5.8031113000e+00, 2.0580658000e+00, 7.3283020000e-01}));
    return abs_t(name, 52, r0, shells.begin(), shells.end());
} // mini_52

} // namespace chemcache
