/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_48() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1426496167e-02, 3.6815667702e-01, 6.8957215697e-01},
      doubles_t{1.1686086000e+04, 1.7701114000e+03, 3.8920899000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0926759832e-01, 7.2503888883e-01, 3.4235079473e-01},
      doubles_t{5.1991106000e+02, 5.0397993000e+01, 2.0834269000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.6344410945e-01, 8.6948153119e-01, 2.7724140995e-01},
      doubles_t{4.4652532000e+01, 7.7506717000e+00, 3.3818076000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.3431460544e-01, 8.1775171331e-01, 3.8128460620e-01},
      doubles_t{6.7897003000e+00, 1.4664135000e+00, 6.1806060000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.5098028958e-01, 6.0867835798e-01, 4.8915026623e-01},
      doubles_t{9.1773480000e-01, 1.1202340000e-01, 4.0828600000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.2734703681e-02, 4.2836851906e-01, 6.3419212821e-01},
      doubles_t{7.4510479000e+02, 1.7404696000e+02, 5.1552438000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.0563900264e-02, 4.0967200354e-01, 6.6260910573e-01},
      doubles_t{1.0627841000e+02, 1.7924992000e+01, 6.7904099000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1551598352e-01, 5.5599347795e-01, 1.2026809523e-01},
      doubles_t{2.5792466000e+00, 1.0573897000e+00, 4.0668460000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2308279905e-01, 4.9167679620e-01, 5.8154079550e-01},
      doubles_t{9.5472743000e+01, 2.6481959000e+01, 8.2828858000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.5160430058e-01, 5.6521680131e-01, 3.9952990093e-01},
      doubles_t{4.0821413000e+00, 1.3572792000e+00, 4.2083080000e-01}));
    return abs_t(name, 48, r0, shells.begin(), shells.end());
} // mini_48

} // namespace chemcache
