/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_55() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0724198677e-02, 3.6584159203e-01, 6.9204698492e-01},
      doubles_t{1.5525866000e+04, 2.3490055000e+03, 5.1623555000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1021269615e-01, 7.2720337459e-01, 3.4014288811e-01},
      doubles_t{6.8750505000e+02, 6.7191157000e+01, 2.7992003000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7531510372e-01, 8.9012811203e-01, 2.6486330358e-01},
      doubles_t{6.0168188000e+01, 1.0868694000e+01, 4.7407047000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6882679465e-01, 8.3258238792e-01, 3.8878909436e-01},
      doubles_t{9.8871626000e+00, 2.3693425000e+00, 1.1416761000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4094179320e-01, 7.0009708603e-01, 4.9345239015e-01},
      doubles_t{1.7690784000e+00, 3.8362030000e-01, 1.7130630000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7502169737e-01, 1.9360399815e-01, 9.1419349125e-01},
      doubles_t{2.1184880000e-01, 4.0324200000e-02, 1.7058100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.9185201619e-02, 4.1993330859e-01, 6.4325141315e-01},
      doubles_t{1.0242833000e+03, 2.3964889000e+02, 7.1255548000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.3122797205e-02, 3.8910826716e-01, 6.7903244270e-01},
      doubles_t{1.3945864000e+02, 2.5810810000e+01, 1.0139452000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.8166881423e-01, 5.7697632151e-01, 1.1540470430e-01},
      doubles_t{4.3242445000e+00, 1.9364152000e+00, 8.1450530000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.1990687930e-01, 5.5318666420e-01, 2.1608848601e-01},
      doubles_t{5.9458430000e-01, 2.7499180000e-01, 1.1155290000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1183020083e-01, 4.7683490355e-01, 5.9541740444e-01},
      doubles_t{1.4405139000e+02, 4.0505146000e+01, 1.3086244000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.5372549150e-01, 5.7888598060e-01, 3.3259808885e-01},
      doubles_t{7.3715777000e+00, 2.7248237000e+00, 1.0266781000e+00}));
    return abs_t(name, 55, r0, shells.begin(), shells.end());
} // mini_55

} // namespace chemcache
