/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_57() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0935900126e-02, 3.6615430075e-01, 6.9147980143e-01},
      doubles_t{1.6625440000e+04, 2.5192937000e+03, 5.5467690000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1052649726e-01, 7.2651408196e-01, 3.4087989154e-01},
      doubles_t{7.3806161000e+02, 7.2542668000e+01, 3.0332746000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7787381494e-01, 8.9512314814e-01, 2.6290531414e-01},
      doubles_t{6.5022157000e+01, 1.1880510000e+01, 5.0799848000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7759150952e-01, 8.4304582125e-01, 3.8664700975e-01},
      doubles_t{1.0833873000e+01, 2.6683331000e+00, 1.2794770000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5609679571e-01, 8.3672428991e-01, 3.6106249565e-01},
      doubles_t{2.0541754000e+00, 4.2145340000e-01, 1.8969740000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.9192270021e-01, 7.0088000078e-01, 4.3005420048e-01},
      doubles_t{2.1333190000e-01, 4.3310200000e-02, 1.8321300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.9529892962e-02, 4.2043376280e-01, 6.4199004319e-01},
      doubles_t{1.1007340000e+03, 2.5810620000e+02, 7.7064873000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.3354800085e-02, 4.0570660103e-01, 6.6160680168e-01},
      doubles_t{1.5729247000e+02, 2.7442045000e+01, 1.0932262000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3939398315e-01, 5.5797397860e-01, 7.5289297112e-02},
      doubles_t{4.5978720000e+00, 2.0136263000e+00, 7.7692440000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.4695771739e-01, 5.3387062077e-01, 9.9681103877e-02},
      doubles_t{6.3938890000e-01, 2.7659870000e-01, 1.0974630000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1202439801e-01, 4.7821459152e-01, 5.9226068949e-01},
      doubles_t{1.5717832000e+02, 4.4393780000e+01, 1.4460783000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8297260375e-01, 5.9068590783e-01, 2.8723770381e-01},
      doubles_t{7.9320490000e+00, 2.9378166000e+00, 1.1238460000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.4802599133e-02, 3.1854779674e-01, 5.2156049467e-01,
                           4.4583819544e-01},
                 doubles_t{2.3231033000e+01, 6.8221675000e+00, 2.1843543000e+00,
                           6.2500150000e-01}));
    return abs_t(name, 57, r0, shells.begin(), shells.end());
} // mini_57

} // namespace chemcache
