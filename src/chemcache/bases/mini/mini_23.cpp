/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_23() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3957800498e-02, 3.7765890294e-01, 6.8048360530e-01},
      doubles_t{2.5634389000e+03, 3.8746176000e+02, 8.4577619000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0131239147e-01, 6.8654514223e-01, 3.7951906806e-01},
      doubles_t{1.1257688000e+02, 1.0242910000e+01, 4.1346585000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2333669775e-01, 7.2266599272e-01, 4.0759319590e-01},
      doubles_t{7.8770045000e+00, 1.2266238000e+00, 4.7757700000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.3291020973e-01, 5.7940764241e-01, 5.0819493720e-01},
      doubles_t{6.1583190000e-01, 7.2475500000e-02, 2.7530200000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.4521098290e-02, 4.4775829190e-01, 6.1817578881e-01},
      doubles_t{1.3691997000e+02, 3.1081206000e+01, 8.7448393000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.4732719820e-01, 5.7627479582e-01, 3.0011129782e-01},
      doubles_t{3.1310711000e+00, 1.1822484000e+00, 4.2352380000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6422439346e-01, 4.9675078022e-01, 6.2589787507e-01},
      doubles_t{7.2698474000e+00, 1.7314426000e+00, 3.8675250000e-01}));
    return abs_t(name, 23, r0, shells.begin(), shells.end());
} // mini_23

} // namespace chemcache
