/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_81() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0001003355e-02, 3.6260632028e-01, 6.9499693886e-01},
      doubles_t{3.4131365000e+04, 5.1723898000e+03, 1.1401778000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1279890408e-01, 7.3691862668e-01, 3.3015271195e-01},
      doubles_t{1.5117882000e+03, 1.5097546000e+02, 6.4320792000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9719211936e-01, 9.0658415904e-01, 2.6696251739e-01},
      doubles_t{1.4010346000e+02, 2.7595196000e+01, 1.1845526000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7930810947e-01, 8.7698242189e-01, 3.5502890886e-01},
      doubles_t{2.6902991000e+01, 6.6871496000e+00, 3.3176591000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.9481609268e-01, 8.8231338364e-01, 3.5079429349e-01},
      doubles_t{5.6090779000e+00, 1.2974407000e+00, 5.5988530000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.7329250962e-01, 8.6977214828e-01, 2.2580451254e-01},
      doubles_t{9.2812700000e-01, 1.1022920000e-01, 4.0572400000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5392597772e-02, 4.0996878789e-01, 6.5180458074e-01},
      doubles_t{2.3775987000e+03, 5.6119485000e+02, 1.6973120000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7401899641e-02, 3.9117079625e-01, 6.7434229353e-01},
      doubles_t{3.1631847000e+02, 6.4888544000e+01, 2.6733530000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3606747730e-01, 5.5745507097e-01, 7.5430996072e-02},
      doubles_t{1.2328211000e+01, 5.5114323000e+00, 2.2169643000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.8470930444e-01, 4.9870450457e-01, 8.9576100820e-02},
      doubles_t{1.9932760000e+00, 8.9758440000e-01, 3.7280210000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.1455537958e-01, 5.1255445122e-01, 3.8170066367e-01},
      doubles_t{2.2282220000e-01, 9.3133600000e-02, 3.7253500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0219610797e-01, 4.6831103653e-01, 5.9761814662e-01},
      doubles_t{3.8360621000e+02, 1.1109160000e+02, 3.7869799000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8727319275e-01, 5.6065428584e-01, 2.9176909263e-01},
      doubles_t{2.2556467000e+01, 9.0361081000e+00, 3.8880752000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.3994036104e-01, 5.6766353495e-01, 2.7234916879e-01},
      doubles_t{2.5003711000e+00, 9.4037700000e-01, 3.2314230000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7048928822e-01, 5.3444276307e-01, 5.5133726191e-01},
      doubles_t{5.6851804000e+01, 1.7181822000e+01, 5.3079932000e+00}));
    return abs_t(name, 81, r0, shells.begin(), shells.end());
} // mini_81

} // namespace chemcache
