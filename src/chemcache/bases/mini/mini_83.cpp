/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_83() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9789898199e-02, 3.6203058910e-01, 6.9567967904e-01},
      doubles_t{3.5963660000e+04, 5.4454286000e+03, 1.1996058000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1275450669e-01, 7.4279954405e-01, 3.2429001923e-01},
      doubles_t{1.5912502000e+03, 1.5816746000e+02, 6.6985958000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9848640480e-01, 9.0968341463e-01, 2.6468670426e-01},
      doubles_t{1.4755203000e+02, 2.9134674000e+01, 1.2498034000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8863821021e-01, 8.9480722351e-01, 3.4518390907e-01},
      doubles_t{2.8216255000e+01, 7.1495803000e+00, 3.5218354000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8139099917e-01, 9.0924809801e-01, 3.1710209931e-01},
      doubles_t{6.2636009000e+00, 1.4271684000e+00, 6.1662980000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.6630300243e-01, 9.5476850873e-01, 2.0388960186e-01},
      doubles_t{1.0835409000e+00, 1.6361770000e-01, 4.2600700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.4695706261e-02, 4.0831373423e-01, 6.5372425480e-01},
      doubles_t{2.5172545000e+03, 5.9388843000e+02, 1.7956047000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7904599869e-02, 3.8622039866e-01, 6.7905549765e-01},
      doubles_t{3.3093361000e+02, 6.9075410000e+01, 2.8522477000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.2306220091e-01, 5.6343450122e-01, 8.2066300177e-02},
      doubles_t{1.3329817000e+01, 6.0302971000e+00, 2.4456258000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{5.0159389979e-01, 4.9779959979e-01, 6.7301999972e-02},
      doubles_t{2.2105424000e+00, 1.0056903000e+00, 4.0840050000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3530068193e-01, 5.4142707752e-01, 1.1843259508e-01},
      doubles_t{2.4893280000e-01, 9.8865300000e-02, 3.9115800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0129449980e-01, 4.6625229910e-01, 5.9940799885e-01},
      doubles_t{4.0774836000e+02, 1.1836555000e+02, 4.0481465000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8362621689e-01, 5.5992953334e-01, 2.9331511747e-01},
      doubles_t{2.4322803000e+01, 9.8293386000e+00, 4.2764203000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.7268981445e-01, 5.7185822217e-01, 2.1604480837e-01},
      doubles_t{2.7618843000e+00, 1.0712666000e+00, 3.8408920000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.6939119320e-01, 5.3554287850e-01, 5.4669107805e-01},
      doubles_t{6.1976718000e+01, 1.8871879000e+01, 5.9233061000e+00}));
    return abs_t(name, 83, r0, shells.begin(), shells.end());
} // mini_83

} // namespace chemcache
