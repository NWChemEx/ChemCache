/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_78() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9859703366e-02, 3.6242562038e-01, 6.9535733910e-01},
      doubles_t{3.1715151000e+04, 4.8004470000e+03, 1.0568133000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1243340238e-01, 7.4028361566e-01, 3.2711790692e-01},
      doubles_t{1.4024880000e+03, 1.3919570000e+02, 5.8595143000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9688659286e-01, 8.9987157836e-01, 2.7241049345e-01},
      doubles_t{1.2903195000e+02, 2.5401783000e+01, 1.1170637000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7651597371e-01, 8.3675514157e-01, 3.9375217251e-01},
      doubles_t{2.4521199000e+01, 6.1520604000e+00, 3.0498908000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.9489250039e-01, 7.8779040078e-01, 4.3841180043e-01},
      doubles_t{5.0181161000e+00, 1.1523707000e+00, 5.0991300000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4804058206e-01, 6.3005005443e-01, 4.8690106478e-01},
      doubles_t{8.5904810000e-01, 9.9517600000e-02, 3.6928800000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5031599020e-02, 4.0978149465e-01, 6.5270019148e-01},
      doubles_t{2.2068799000e+03, 5.1935114000e+02, 1.5651110000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7540701397e-02, 3.8535951434e-01, 6.8027712531e-01},
      doubles_t{2.9310449000e+02, 5.9918114000e+01, 2.4556392000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.9431990178e-01, 5.7109450258e-01, 1.0572930048e-01},
      doubles_t{1.1628939000e+01, 5.2412093000e+00, 2.2477054000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.6239750067e-01, 5.3867280100e-01, 1.7795940033e-01},
      doubles_t{1.8605783000e+00, 8.9302370000e-01, 3.7742690000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0218659886e-01, 4.6860689475e-01, 5.9864989330e-01},
      doubles_t{3.5185991000e+02, 1.0148732000e+02, 3.4372939000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7969010152e-01, 5.6216680306e-01, 3.0332100165e-01},
      doubles_t{2.0563355000e+01, 8.1266279000e+00, 3.4000049000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7148299373e-01, 5.6215808701e-01, 3.6275089162e-01},
      doubles_t{2.2428150000e+00, 8.3045520000e-01, 2.6917020000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7325859875e-01, 5.3237379616e-01, 5.5871979597e-01},
      doubles_t{4.9223375000e+01, 1.4713828000e+01, 4.4259372000e+00}));
    return abs_t(name, 78, r0, shells.begin(), shells.end());
} // mini_78

} // namespace chemcache
