/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_60() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0587598576e-02, 3.6512709142e-01, 6.9265258372e-01},
      doubles_t{1.8526642000e+04, 2.8048423000e+03, 6.1704358000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1077530788e-01, 7.3176505203e-01, 3.3578082388e-01},
      doubles_t{8.2124079000e+02, 8.0575481000e+01, 3.3535519000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8234718365e-01, 8.9664724808e-01, 2.6411478471e-01},
      doubles_t{7.2745461000e+01, 1.3509141000e+01, 5.8627242000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7332902447e-01, 8.5566385608e-01, 3.7156752436e-01},
      doubles_t{1.2536668000e+01, 3.0529657000e+00, 1.4459091000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.4528609248e-01, 8.0943388236e-01, 3.8276439166e-01},
      doubles_t{2.3675661000e+00, 4.8032360000e-01, 2.1321500000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.1232009657e-01, 6.4101918966e-01, 4.9667069199e-01},
      doubles_t{2.4169740000e-01, 4.8563600000e-02, 2.0452900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.8745399851e-02, 4.1860199921e-01, 6.4382049878e-01},
      doubles_t{1.2345803000e+03, 2.8969646000e+02, 8.6648623000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.4007501341e-02, 3.9099161541e-01, 6.7599482665e-01},
      doubles_t{1.6858307000e+02, 3.1866276000e+01, 1.2721128000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1351839928e-01, 5.6448779902e-01, 9.5191199834e-02},
      doubles_t{5.5014686000e+00, 2.4419010000e+00, 1.0013475000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.2289178798e-01, 5.4079118463e-01, 1.2054959658e-01},
      doubles_t{7.4285560000e-01, 3.2091090000e-01, 1.2917820000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1068709978e-01, 4.7744589906e-01, 5.9195559883e-01},
      doubles_t{1.7965660000e+02, 5.0987916000e+01, 1.6747778000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8085728216e-01, 5.8528516282e-01, 2.9464598128e-01},
      doubles_t{9.4309935000e+00, 3.5273865000e+00, 1.3506401000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.3603301887e-02, 3.2150070726e-01, 5.2453251184e-01,
                           4.2760970965e-01},
                 doubles_t{2.9610554000e+01, 8.8796987000e+00, 2.9115210000e+00,
                           8.6225690000e-01}));
    return abs_t(name, 60, r0, shells.begin(), shells.end());
} // mini_60

} // namespace chemcache
