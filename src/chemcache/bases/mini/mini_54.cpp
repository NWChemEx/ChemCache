/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_54() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0996896635e-02, 3.6662897977e-01, 6.9111546187e-01},
      doubles_t{1.4902236000e+04, 2.2565383000e+03, 4.9637317000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1022470356e-01, 7.2258322335e-01, 3.4481711114e-01},
      doubles_t{6.6094947000e+02, 6.4863039000e+01, 2.7111403000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.7614630038e-01, 8.6781210119e-01, 2.8794740039e-01},
      doubles_t{5.7515261000e+01, 1.0536085000e+01, 4.7042710000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6737419458e-01, 8.2427518783e-01, 3.9630109415e-01},
      doubles_t{9.3786082000e+00, 2.2401181000e+00, 1.0615968000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.1274488521e-01, 7.8415936292e-01, 3.8907618160e-01},
      doubles_t{1.6958079000e+00, 3.0651180000e-01, 1.2049350000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.0956198063e-02, 4.2272898989e-01, 6.3884278472e-01},
      doubles_t{9.7198851000e+02, 2.2772243000e+02, 6.8162563000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.8515519219e-02, 4.6267611184e-01, 6.0377030693e-01},
      doubles_t{1.6453820000e+02, 2.2210478000e+01, 8.9000056000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.5034528267e-01, 5.4002567922e-01, 8.2834996813e-02},
      doubles_t{3.7649228000e+00, 1.6522375000e+00, 6.7649630000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.9000010300e-01, -5.2334640402e-01, -1.9060460147e-01},
      doubles_t{4.7842850000e-01, 1.9781290000e-01, 7.9153900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.1501049082e-01, 4.8159516155e-01, 5.8961325293e-01},
      doubles_t{1.3491331000e+02, 3.7956387000e+01, 1.2227475000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7188440115e-01, 5.8555690247e-01, 3.1274560132e-01},
      doubles_t{6.6004928000e+00, 2.3980513000e+00, 8.8648240000e-01}));
    return abs_t(name, 54, r0, shells.begin(), shells.end());
} // mini_54

} // namespace chemcache
