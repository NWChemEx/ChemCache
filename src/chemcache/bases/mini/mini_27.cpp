/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_27() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3407201299e-02, 3.7570530770e-01, 6.8231271398e-01},
      doubles_t{3.5691023000e+03, 5.3975057000e+02, 1.1806735000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0375510094e-01, 6.9885740634e-01, 3.6776670334e-01},
      doubles_t{1.5760903000e+02, 1.4633143000e+01, 5.9354094000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2385059338e-01, 7.1864077875e-01, 4.1428238775e-01},
      doubles_t{1.1790403000e+01, 1.8690733000e+00, 7.1451060000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-9.9974404930e-02, 5.5457572735e-01, 5.1933582561e-01},
      doubles_t{8.3085500000e-01, 8.0935400000e-02, 3.0215500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.2792395884e-02, 4.4760708015e-01, 6.1672107264e-01},
      doubles_t{1.9885110000e+02, 4.5443908000e+01, 1.2984531000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.5504558953e-01, 5.7083327658e-01, 2.9988908769e-01},
      doubles_t{4.8835867000e+00, 1.8407375000e+00, 6.5687530000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.7044710593e-01, 5.0851591768e-01, 6.0807002114e-01},
      doubles_t{1.2634196000e+01, 3.0847767000e+00, 6.9473160000e-01}));
    return abs_t(name, 27, r0, shells.begin(), shells.end());
} // mini_27

} // namespace chemcache
