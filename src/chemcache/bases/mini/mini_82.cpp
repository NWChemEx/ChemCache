/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_82() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9835102278e-02, 3.6219041379e-01, 6.9551152648e-01},
      doubles_t{3.5075240000e+04, 5.3112719000e+03, 1.1700875000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1272699369e-01, 7.4188715848e-01, 3.2511878180e-01},
      doubles_t{1.5518174000e+03, 1.5431441000e+02, 6.5481080000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9776041044e-01, 9.1612973212e-01, 2.5683610900e-01},
      doubles_t{1.4395513000e+02, 2.8198551000e+01, 1.2139813000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8399220129e-01, 8.9091380298e-01, 3.4401370115e-01},
      doubles_t{2.7546889000e+01, 6.8739521000e+00, 3.4374831000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6752321184e-01, 9.2614412983e-01, 2.8487430918e-01},
      doubles_t{6.0560593000e+00, 1.2999385000e+00, 5.8010670000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3455311179e-01, 8.7025894376e-01, 2.8261791421e-01},
      doubles_t{1.0041909000e+00, 1.5157280000e-01, 4.1580400000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.4936102363e-02, 4.0897061289e-01, 6.5302692059e-01},
      doubles_t{2.4494365000e+03, 5.7781442000e+02, 1.7467073000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7780399790e-02, 3.8723689785e-01, 6.7803579623e-01},
      doubles_t{3.2439605000e+02, 6.7056357000e+01, 2.7668571000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1357028549e-01, 5.7161367995e-01, 8.5826096989e-02},
      doubles_t{1.3013204000e+01, 5.8680654000e+00, 2.2720421000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.7083006172e-01, 5.1313635828e-01, 8.6295892984e-02},
      doubles_t{2.1325320000e+00, 9.8157820000e-01, 3.9467210000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.2125188895e-01, 5.6041858072e-01, 2.2302379233e-01},
      doubles_t{2.3589380000e-01, 9.7028100000e-02, 3.8179000000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0155180129e-01, 4.6720910594e-01, 5.9881610761e-01},
      doubles_t{3.9602788000e+02, 1.1478406000e+02, 3.9165515000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8438547984e-01, 5.5881796039e-01, 2.9486797910e-01},
      doubles_t{2.3480294000e+01, 9.4592198000e+00, 4.1021059000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.4370638610e-01, 5.7205557687e-01, 2.5398468973e-01},
      doubles_t{2.6854228000e+00, 1.0321544000e+00, 3.6406950000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7035220167e-01, 5.3520270523e-01, 5.4837770536e-01},
      doubles_t{5.9277049000e+01, 1.7991863000e+01, 5.6059964000e+00}));
    return abs_t(name, 82, r0, shells.begin(), shells.end());
} // mini_82

} // namespace chemcache
