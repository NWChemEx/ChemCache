/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_74() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9984699820e-02, 3.6294239891e-01, 6.9485439792e-01},
      doubles_t{2.8483470000e+04, 4.3106522000e+03, 9.4880189000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1227219118e-01, 7.3560664223e-01, 3.3112377399e-01},
      doubles_t{1.2601431000e+03, 1.2499189000e+02, 5.3264926000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9681507768e-01, 8.9594533264e-01, 2.7433237937e-01},
      doubles_t{1.1485307000e+02, 2.2490909000e+01, 1.0205372000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.6002002134e-01, 8.4715855021e-01, 3.6608722170e-01},
      doubles_t{2.1986566000e+01, 5.1545586000e+00, 2.6238159000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0826779334e-01, 4.9769848925e-01, 6.6650858561e-01},
      doubles_t{4.5567679000e+00, 9.9070500000e-01, 4.9395050000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.0501879741e-01, 4.9691378774e-01, 5.0462128755e-01},
      doubles_t{9.4116790000e-01, 8.9563400000e-02, 3.3238300000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.5712302650e-02, 4.1163671441e-01, 6.5090952278e-01},
      doubles_t{1.9659337000e+03, 4.6228149000e+02, 1.3907004000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.6877300571e-02, 3.8720420600e-01, 6.7906861052e-01},
      doubles_t{2.6033590000e+02, 5.2992087000e+01, 2.1564622000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.5997741766e-01, 5.6068502750e-01, 1.5263270749e-01},
      doubles_t{1.0448376000e+01, 4.7961135000e+00, 2.2000558000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.5706950093e-01, 6.4361590382e-01, 2.8525490169e-01},
      doubles_t{1.9472206000e+00, 8.6995200000e-01, 3.2961940000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0407909989e-01, 4.7171589950e-01, 5.9589429937e-01},
      doubles_t{3.0802405000e+02, 8.8529624000e+01, 2.9802451000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.7903858274e-01, 5.5997176537e-01, 3.1286498065e-01},
      doubles_t{1.7714492000e+01, 6.8804872000e+00, 2.8091248000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6121200450e-01, 5.3294761488e-01, 5.0169851401e-01},
      doubles_t{2.0762160000e+00, 7.3677300000e-01, 2.2781600000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.8108509877e-01, 5.3147349638e-01, 5.6703189614e-01},
      doubles_t{3.9064396000e+01, 1.1456039000e+01, 3.2885779000e+00}));
    return abs_t(name, 74, r0, shells.begin(), shells.end());
} // mini_74

} // namespace chemcache
