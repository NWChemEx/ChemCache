/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_40() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1660599747e-02, 3.6961399848e-01, 6.8845489717e-01},
      doubles_t{8.0745440000e+03, 1.2205300000e+03, 2.6754751000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0773390094e-01, 7.2168510626e-01, 3.4569210300e-01},
      doubles_t{3.5768109000e+02, 3.4142568000e+01, 1.3947566000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4838620637e-01, 8.0059822054e-01, 3.3767740866e-01},
      doubles_t{2.9610522000e+01, 4.9809391000e+00, 2.1850378000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.1043048706e-01, 8.0229366657e-01, 3.7416558441e-01},
      doubles_t{3.8399904000e+00, 7.3978700000e-01, 3.0961920000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2888568604e-01, 7.8170735233e-01, 3.1951928051e-01},
      doubles_t{5.5502130000e-01, 5.5328900000e-02, 2.1371700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.6740898901e-02, 4.3627279447e-01, 6.2557239208e-01},
      doubles_t{4.9162198000e+02, 1.1393040000e+02, 3.3605515000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.8038440401e-01, 5.9227020847e-01, 2.2251470318e-01},
      doubles_t{1.3247292000e+01, 5.3389914000e+00, 2.2525019000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.0585178652e-01, 5.2466868258e-01, 1.6339529457e-01},
      doubles_t{1.2314752000e+00, 5.2978850000e-01, 2.1408760000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.3476420279e-01, 5.0149951037e-01, 5.7866961197e-01},
      doubles_t{5.4716068000e+01, 1.4743888000e+01, 4.3333204000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.9253369356e-01, 5.0529168311e-01, 5.3856928199e-01},
      doubles_t{1.6859057000e+00, 5.3743520000e-01, 1.5022100000e-01}));
    return abs_t(name, 40, r0, shells.begin(), shells.end());
} // mini_40

} // namespace chemcache
