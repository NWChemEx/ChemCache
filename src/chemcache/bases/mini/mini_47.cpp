/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_47() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.1465200581e-02, 3.6834070348e-01, 6.8941700652e-01},
      doubles_t{1.1195393000e+04, 1.6956114000e+03, 3.7271564000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0909840694e-01, 7.2483564609e-01, 3.4259052179e-01},
      doubles_t{4.9808789000e+02, 4.8189273000e+01, 1.9879233000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.6161270876e-01, 8.6389302894e-01, 2.8149490943e-01},
      doubles_t{4.2617304000e+01, 7.3549843000e+00, 3.2193663000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.2644839035e-01, 8.2441937563e-01, 3.6845698911e-01},
      doubles_t{6.4471843000e+00, 1.3406340000e+00, 5.5082490000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.4643380231e-01, 6.0781230958e-01, 4.7457800748e-01},
      doubles_t{8.9602400000e-01, 7.8739500000e-02, 2.9425700000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.3201600888e-02, 4.2929510458e-01, 6.3314560676e-01},
      doubles_t{7.0979348000e+02, 1.6575065000e+02, 4.9079374000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.0554899363e-02, 4.1703589130e-01, 6.5524438633e-01},
      doubles_t{1.0590189000e+02, 1.6746072000e+01, 6.3433500000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.6782838530e-01, 5.5983357762e-01, 1.6795549329e-01},
      doubles_t{2.5115170000e+00, 1.0560803000e+00, 4.1595730000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2378380671e-01, 4.9254672668e-01, 5.8187673152e-01},
      doubles_t{9.0022978000e+01, 2.4875706000e+01, 7.7224910000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.3954590409e-01, 5.5915010955e-01, 4.3114170737e-01},
      doubles_t{3.7854315000e+00, 1.2278562000e+00, 3.5902460000e-01}));
    return abs_t(name, 47, r0, shells.begin(), shells.end());
} // mini_47

} // namespace chemcache
