/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_64() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0367797752e-02, 3.6444558643e-01, 6.9337487418e-01},
      doubles_t{2.1161540000e+04, 3.2022178000e+03, 7.0445174000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1158750134e-01, 7.2151310869e-01, 3.4495640415e-01},
      doubles_t{9.3554786000e+02, 9.2934461000e+01, 3.9928439000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8970881494e-01, 8.6352014453e-01, 3.0186281557e-01},
      doubles_t{8.3470797000e+01, 1.6165723000e+01, 7.4522280000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.9625157807e-01, 6.6573186316e-01, 5.7986776791e-01},
      doubles_t{1.4303089000e+01, 4.0502079000e+00, 2.1005199000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1534300561e-02, 1.8440310897e-01, 8.3159344046e-01},
      doubles_t{4.6945382000e+00, 7.2433140000e-01, 3.7987330000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{7.4714098921e-02, 2.9362929576e-01, 7.1778318963e-01},
      doubles_t{8.6600240000e-01, 6.6992700000e-02, 2.5483500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.7413104190e-02, 4.1558032249e-01, 6.4712213503e-01},
      doubles_t{1.4301271000e+03, 3.3566767000e+02, 1.0050588000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.5044901725e-02, 3.8866971913e-01, 6.7799613337e-01},
      doubles_t{1.9218592000e+02, 3.7398973000e+01, 1.5032371000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.1540122735e-01, 5.1872964498e-01, 2.3724412057e-01},
      doubles_t{7.2245576000e+00, 3.5923145000e+00, 1.7459549000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-1.0985999250e-03, 5.4980076267e-01, 5.2833736413e-01},
      doubles_t{2.0373631000e+00, 7.7355580000e-01, 2.7298820000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0804389736e-01, 4.7533178839e-01, 5.9393438550e-01},
      doubles_t{2.1333543000e+02, 6.0761796000e+01, 2.0097751000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8285628366e-01, 5.7693166667e-01, 3.0107148261e-01},
      doubles_t{1.1465387000e+01, 4.3293004000e+00, 1.6672499000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.0223600296e-02, 3.2029090118e-01, 5.2384020193e-01,
                           4.3025430159e-01},
                 doubles_t{3.8819868000e+01, 1.1714379000e+01, 3.8626271000e+00,
                           1.1414087000e+00}));
    return abs_t(name, 64, r0, shells.begin(), shells.end());
} // mini_64

} // namespace chemcache
