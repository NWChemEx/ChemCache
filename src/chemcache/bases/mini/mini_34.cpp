/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_34() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2493402400e-02, 3.7236831430e-01, 6.8557992632e-01},
      doubles_t{5.7513215000e+03, 8.7025721000e+02, 1.9072949000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0634030338e-01, 7.1205772261e-01, 3.5507921127e-01},
      doubles_t{2.5518802000e+02, 2.4155395000e+01, 9.8525390000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.3265250404e-01, 7.4650531297e-01, 3.8574920670e-01},
      doubles_t{2.0463481000e+01, 3.3125921000e+00, 1.3791545000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.1695170794e-01, 6.8529372507e-01, 4.4866011641e-01},
      doubles_t{2.0492750000e+00, 3.3641160000e-01, 1.2612690000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.9962697311e-02, 4.4357848674e-01, 6.1891008150e-01},
      doubles_t{3.3708753000e+02, 7.7748281000e+01, 2.2650400000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7898028255e-01, 5.7602386397e-01, 2.5297848418e-01},
      doubles_t{8.6914000000e+00, 3.3668794000e+00, 1.3546532000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.2862529991e-01, 5.4896769985e-01, 2.4444259993e-01},
      doubles_t{5.4258450000e-01, 2.0662960000e-01, 7.7602100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.5198579623e-01, 5.1164028730e-01, 5.7869358564e-01},
      doubles_t{3.0627464000e+01, 7.9712764000e+00, 2.1348097000e+00}));
    return abs_t(name, 34, r0, shells.begin(), shells.end());
} // mini_34

} // namespace chemcache
