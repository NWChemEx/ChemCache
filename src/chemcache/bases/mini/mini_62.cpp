/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_62() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0412903019e-02, 3.6463981822e-01, 6.9320133464e-01},
      doubles_t{1.9842708000e+04, 3.0021144000e+03, 6.6028800000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1099730328e-01, 7.3283572166e-01, 3.3458420989e-01},
      doubles_t{8.7904586000e+02, 8.6285511000e+01, 3.6009643000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.8350700410e-01, 9.0547291309e-01, 2.5655980371e-01},
      doubles_t{7.8329115000e+01, 1.4573156000e+01, 6.2287472000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7034198696e-01, 8.4685827018e-01, 3.7951078664e-01},
      doubles_t{1.3752721000e+01, 3.3563672000e+00, 1.5718294000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.5478501125e-01, 7.6718952432e-01, 4.2234811339e-01},
      doubles_t{2.6439751000e+00, 5.2293990000e-01, 2.3610460000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.1589900013e-01, 6.0946540036e-01, 5.2713360032e-01},
      doubles_t{2.5807910000e-01, 5.1366000000e-02, 2.1839100000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.8102203623e-02, 4.1701921934e-01, 6.4548502994e-01},
      doubles_t{1.3298270000e+03, 3.1219809000e+02, 9.3453620000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.4534098145e-02, 3.9379087885e-01, 6.7292626385e-01},
      doubles_t{1.8254042000e+02, 3.4346164000e+01, 1.3784402000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.9754391124e-01, 5.7698111632e-01, 1.0123750286e-01},
      doubles_t{6.1634636000e+00, 2.7292360000e+00, 1.0706707000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.1529691629e-01, 5.4103612122e-01, 1.2922990507e-01},
      doubles_t{8.0855730000e-01, 3.4537440000e-01, 1.4370990000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0999100253e-01, 4.7712211099e-01, 5.9162231362e-01},
      doubles_t{1.9529689000e+02, 5.5593987000e+01, 1.8348060000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8599411116e-01, 5.8638992288e-01, 2.8886841127e-01},
      doubles_t{1.0389082000e+01, 3.8703504000e+00, 1.4811196000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.5110695582e-02, 3.2573028309e-01, 5.2491437275e-01,
                           4.2144257813e-01},
                 doubles_t{3.3212664000e+01, 1.0045060000e+01, 3.3169803000e+00,
                           9.7947740000e-01}));
    return abs_t(name, 62, r0, shells.begin(), shells.end());
} // mini_62

} // namespace chemcache
