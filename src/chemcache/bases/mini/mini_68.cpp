/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_68() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0268297470e-02, 3.6395668472e-01, 6.9381127088e-01},
      doubles_t{2.3932986000e+04, 3.6231807000e+03, 7.9744649000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1206620813e-01, 7.2168065238e-01, 3.4460592501e-01},
      doubles_t{1.0580700000e+03, 1.0560404000e+02, 4.5715154000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9317409129e-01, 8.7167447411e-01, 2.9561389122e-01},
      doubles_t{9.5445255000e+01, 1.8624316000e+01, 8.6540627000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.7542350989e-01, 7.1184741875e-01, 5.1411211354e-01},
      doubles_t{1.7427739000e+01, 4.4976911000e+00, 2.3319556000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.6867900884e-02, 2.2269201167e-01, 7.9874534184e-01},
      doubles_t{4.8804329000e+00, 8.1161510000e-01, 4.1312410000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{7.6794504997e-02, 2.3957521559e-01, 7.6802814998e-01},
      doubles_t{9.9230000000e-01, 7.5628400000e-02, 2.8768500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.6821494849e-02, 4.1424407223e-01, 6.4830755653e-01},
      doubles_t{1.6318520000e+03, 3.8338971000e+02, 1.1506026000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.5663900627e-02, 3.9072480686e-01, 6.7593831188e-01},
      doubles_t{2.1745963000e+02, 4.3178334000e+01, 1.7445255000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{3.3872186586e-01, 5.3287554629e-01, 2.0185867965e-01},
      doubles_t{8.4116514000e+00, 4.0197899000e+00, 1.9188907000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.3867499388e-02, 5.5820597536e-01, 5.1148877742e-01},
      doubles_t{2.1201431000e+00, 8.4677320000e-01, 2.9517370000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0716079386e-01, 4.7572127275e-01, 5.9252816606e-01},
      doubles_t{2.4776101000e+02, 7.0854934000e+01, 2.3602151000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8910279667e-01, 5.7655069337e-01, 2.9606099660e-01},
      doubles_t{1.3592062000e+01, 5.1225912000e+00, 1.9684932000e+00}));
    shells.emplace_back(
      make_shell(pure_t::pure, 3,
                 doubles_t{8.6203899196e-02, 3.3311649689e-01, 5.2286639512e-01,
                           4.1972669609e-01},
                 doubles_t{4.5343394000e+01, 1.3864352000e+01, 4.5763128000e+00,
                           1.3278260000e+00}));
    return abs_t(name, 68, r0, shells.begin(), shells.end());
} // mini_68

} // namespace chemcache
