/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_31() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.2839604389e-02, 3.7361122610e-01, 6.8436264780e-01},
      doubles_t{4.7518979000e+03, 7.1892054000e+02, 1.5744592000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.0540269638e-01, 7.0707777569e-01, 3.5994968763e-01},
      doubles_t{2.1053833000e+02, 1.9794805000e+01, 8.0497965000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{2.2707318348e-01, -7.1114074828e-01, -4.2138586935e-01},
      doubles_t{1.6424933000e+01, 2.6576527000e+00, 1.0609873000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.5070840838e-01, 6.4134413567e-01, 4.6006432559e-01},
      doubles_t{1.3533154000e+00, 1.7615810000e-01, 6.3719500000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{9.0895597771e-02, 4.4564928907e-01, 6.1790258485e-01},
      doubles_t{2.7364584000e+02, 6.2815151000e+01, 1.8134221000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.7390149999e-01, 5.6895119997e-01, 2.7560749999e-01},
      doubles_t{6.8387139000e+00, 2.5958668000e+00, 9.8389370000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{2.0629640309e-01, 5.5635650833e-01, 3.6709880550e-01},
      doubles_t{3.1568850000e-01, 1.0961940000e-01, 3.9943900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.6198950263e-01, 5.1167390832e-01, 5.8987320959e-01},
      doubles_t{2.1292530000e+01, 5.3931662000e+00, 1.3338828000e+00}));
    return abs_t(name, 31, r0, shells.begin(), shells.end());
} // mini_31

} // namespace chemcache
