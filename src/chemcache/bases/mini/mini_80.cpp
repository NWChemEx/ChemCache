/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "mini.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t mini_80() {
    // Basis Set name and origin point
    std::string name("mini");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{5.9793900893e-02, 3.6222790541e-01, 6.9556101039e-01},
      doubles_t{3.3404144000e+04, 5.0549760000e+03, 1.1129314000e+03}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.1248540650e-01, 7.4393634296e-01, 3.2358691869e-01},
      doubles_t{1.4756246000e+03, 1.4640265000e+02, 6.1389131000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.9795128564e-01, 9.1456575593e-01, 2.5831038755e-01},
      doubles_t{1.3621257000e+02, 2.6696685000e+01, 1.1554849000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8068730336e-01, 8.6149640760e-01, 3.7199270328e-01},
      doubles_t{2.5982997000e+01, 6.5233802000e+00, 3.2362472000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.9560549523e-01, 8.4154018985e-01, 3.9373689525e-01},
      doubles_t{5.3106531000e+00, 1.2593063000e+00, 5.4614630000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-1.9989160303e-01, 6.3547790964e-01, 4.7479920721e-01},
      doubles_t{8.9197220000e-01, 1.0752430000e-01, 3.9379900000e-02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{7.4719105055e-02, 4.0888722766e-01, 6.5354904421e-01},
      doubles_t{2.3328646000e+03, 5.4914520000e+02, 1.6564020000e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.7540601202e-02, 3.8809991243e-01, 6.7772742170e-01},
      doubles_t{3.0619849000e+02, 6.3373202000e+01, 2.6012143000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.3394127688e-01, 5.5937467020e-01, 7.5912095956e-02},
      doubles_t{1.1965861000e+01, 5.3228262000e+00, 2.1625624000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.5723956504e-01, 5.0640696128e-01, 1.1389949129e-01},
      doubles_t{1.9253031000e+00, 8.7120260000e-01, 3.6365400000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.0097749725e-01, 4.6673068729e-01, 6.0060988364e-01},
      doubles_t{3.7583702000e+02, 1.0848287000e+02, 3.6833664000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.8343701760e-01, 5.6388373502e-01, 2.9476531831e-01},
      doubles_t{2.1948085000e+01, 8.7311154000e+00, 3.6993476000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{3.1621811143e-01, 5.5840832018e-01, 3.1796131149e-01},
      doubles_t{2.3911943000e+00, 8.9025730000e-01, 2.9559020000e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 3,
      doubles_t{1.7159870130e-01, 5.3387270405e-01, 5.5331290419e-01},
      doubles_t{5.4207840000e+01, 1.6330801000e+01, 5.0053841000e+00}));
    return abs_t(name, 80, r0, shells.begin(), shells.end());
} // mini_80

} // namespace chemcache
