/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py 
 * 
 * NOTE: Any modifications made in this file will be lost next time 
 *       generate_basis.py is run.
 */

#include "../bases.hpp"
#include "sto_dash_3g.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using atomic_basis_pt = simde::AtomicBasisSetFromZ;
using abs_t           = simde::type::atomic_basis_set;
using shell_t         = simde::type::shell;
using center_t        = simde::type::point;
using shells_t        = std::vector<shell_t>;
using doubles_t       = std::vector<double>;
using pure_t          = chemist::ShellType;

static constexpr auto module_desc = R"(
sto-3g atomic basis set
---------------------------------

This module returns the atomic basis set associated with an atomic number.
This module was autogenerated.
)";

MODULE_CTOR(sto_dash_3g_atom_basis) {
    description(module_desc);
    satisfies_property_type<atomic_basis_pt>();
}

MODULE_RUN(sto_dash_3g_atom_basis) {
    const auto& [Z] = atomic_basis_pt::unwrap_inputs(inputs);
    auto rv         = results();

    switch(Z) {
        case(1): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_1());
        }
        case(2): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_2());
        }
        case(3): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_3());
        }
        case(4): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_4());
        }
        case(5): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_5());
        }
        case(6): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_6());
        }
        case(7): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_7());
        }
        case(8): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_8());
        }
        case(9): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_9());
        }
        case(10): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_10());
        }
        case(11): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_11());
        }
        case(12): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_12());
        }
        case(13): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_13());
        }
        case(14): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_14());
        }
        case(15): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_15());
        }
        case(16): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_16());
        }
        case(17): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_17());
        }
        case(18): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_18());
        }
        case(19): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_19());
        }
        case(20): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_20());
        }
        case(21): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_21());
        }
        case(22): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_22());
        }
        case(23): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_23());
        }
        case(24): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_24());
        }
        case(25): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_25());
        }
        case(26): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_26());
        }
        case(27): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_27());
        }
        case(28): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_28());
        }
        case(29): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_29());
        }
        case(30): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_30());
        }
        case(31): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_31());
        }
        case(32): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_32());
        }
        case(33): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_33());
        }
        case(34): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_34());
        }
        case(35): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_35());
        }
        case(36): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_36());
        }
        case(37): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_37());
        }
        case(38): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_38());
        }
        case(39): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_39());
        }
        case(40): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_40());
        }
        case(41): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_41());
        }
        case(42): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_42());
        }
        case(43): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_43());
        }
        case(44): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_44());
        }
        case(45): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_45());
        }
        case(46): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_46());
        }
        case(47): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_47());
        }
        case(48): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_48());
        }
        case(49): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_49());
        }
        case(50): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_50());
        }
        case(51): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_51());
        }
        case(52): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_52());
        }
        case(53): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_53());
        }
        case(54): {
            return atomic_basis_pt::wrap_results(rv, sto_dash_3g_54());
        }
        default: {
            throw std::out_of_range("Basis Set not available for Z");
        }
    }
}

} // namespace chemcache
