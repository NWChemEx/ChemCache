/*
 * Copyright 2025 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "sto_dash_3g.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t sto_dash_3g_52() {
    // Basis Set name and origin point
    std::string name("sto-3g");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.5432896730e-01, 5.3532814230e-01, 4.4463454220e-01},
      doubles_t{5.8100615910e+03, 1.0583099720e+03, 2.8641997970e+02}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-9.9967229190e-02, 3.9951282610e-01, 7.0011546890e-01},
      doubles_t{5.1275419200e+02, 1.1915304710e+02, 3.8752269000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{1.5591627500e-01, 6.0768371860e-01, 3.9195739310e-01},
      doubles_t{5.1275419200e+02, 1.1915304710e+02, 3.8752269000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2776350230e-01, 2.1754360440e-01, 9.1667696110e-01},
      doubles_t{6.5985562270e+01, 2.0127699700e+01, 7.7658922790e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{4.9515111550e-03, 5.7776646910e-01, 4.8464603660e-01},
      doubles_t{6.5985562270e+01, 2.0127699700e+01, 7.7658922790e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.3061006260e-01, 5.7610953380e-02, 1.1155787450e+00},
      doubles_t{6.7079569210e+00, 2.6120436550e+00, 1.1498280480e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-1.2839276340e-01, 5.8520476410e-01, 5.4394420400e-01},
      doubles_t{6.7079569210e+00, 2.6120436550e+00, 1.1498280480e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.8426426080e-01, -1.9725674380e-01, 1.3754955120e+00},
      doubles_t{7.0127134830e-01, 3.7759126530e-01, 1.6678870200e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-3.4816915260e-01, 6.2903236900e-01, 6.6628327430e-01},
      doubles_t{7.0127134830e-01, 3.7759126530e-01, 1.6678870200e-01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{2.1976795080e-01, 6.5554736270e-01, 2.8657325900e-01},
      doubles_t{6.5985562270e+01, 2.0127699700e+01, 7.7658922790e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 2,
      doubles_t{1.2506621380e-01, 6.6867855770e-01, 3.0524682450e-01},
      doubles_t{6.7079569210e+00, 2.6120436550e+00, 1.1498280480e+00}));
    return abs_t(name, 52, r0, shells.begin(), shells.end());
} // sto_dash_3g_52

} // namespace chemcache
