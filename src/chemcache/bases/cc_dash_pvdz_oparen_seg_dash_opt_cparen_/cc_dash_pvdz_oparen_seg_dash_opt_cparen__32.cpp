/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvdz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvdz_oparen_seg_dash_opt_cparen__32() {
    // Basis Set name and origin point
    std::string name("cc-pvdz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(
      make_shell(pure_t::pure, 0,
                 doubles_t{2.0448000000e-04, 1.5864900000e-03, 8.2480400000e-03,
                           3.3664900000e-02, 1.1021530000e-01, 2.7409028000e-01,
                           4.2407512000e-01, 2.8003820000e-01, 1.1228080000e-02,
                           -3.0104720000e-02},
                 doubles_t{5.2180000000e+05, 7.8214000000e+04, 1.7803000000e+04,
                           5.0419000000e+03, 1.6445000000e+03, 5.9343000000e+02,
                           2.3136000000e+02, 9.4762000000e+01, 2.9274000000e+01,
                           1.2450000000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.4000000000e-07, 8.3900000000e-06, -1.3900000000e-06,
                -2.4592200000e-03, -1.4353540000e-02, -8.1614570000e-02,
                -9.0813040000e-02, 4.8479993000e-01, 6.2813023000e-01,
                8.3290490000e-02},
      doubles_t{5.2180000000e+05, 7.8214000000e+04, 1.7803000000e+04,
                1.6445000000e+03, 5.9343000000e+02, 2.3136000000e+02,
                9.4762000000e+01, 2.9274000000e+01, 1.2450000000e+01,
                3.6463000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.0000000000e-07, -1.2000000000e-06, -1.0540000000e-05,
                1.4230800000e-03, 5.8605700000e-03, 1.5188670000e-02,
                -1.2303736000e-01, -3.0938948000e-01, 5.8986188000e-01,
                6.9880759000e-01},
      doubles_t{5.2180000000e+05, 7.8214000000e+04, 1.7803000000e+04,
                5.9343000000e+02, 2.3136000000e+02, 9.4762000000e+01,
                2.9274000000e+01, 1.2450000000e+01, 3.6463000000e+00,
                1.5025000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{4.0000000000e-08, -2.0000000000e-08, 3.8640000000e-05,
                1.5367000000e-04, -2.0210100000e-03, -6.8068700000e-03,
                -5.9071900000e-03, -1.7404895000e-01, 6.5845280000e-01},
      doubles_t{7.8214000000e+04, 1.7803000000e+04, 2.3136000000e+02,
                9.4762000000e+01, 2.9274000000e+01, 1.2450000000e+01,
                3.6463000000e+00, 1.5025000000e+00, 2.4503000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{9.1594000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{1.4591000000e-03, 1.2217710000e-02, 6.1053350000e-02,
                           2.0083798000e-01, 4.0404301000e-01, 3.9708099000e-01,
                           1.0894125000e-01, -3.5220200000e-03},
                 doubles_t{3.5681000000e+03, 8.4572000000e+02, 2.7274000000e+02,
                           1.0268000000e+02, 4.2148000000e+01, 1.8149000000e+01,
                           7.5934000000e+00, 3.1964000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.1190000000e-05, -7.3067000000e-04, -5.7706900000e-03,
                -2.4953870000e-02, -1.3460590000e-02, 2.7017540000e-01,
                6.0133374000e-01, 3.5897601000e-01},
      doubles_t{8.4572000000e+02, 2.7274000000e+02, 1.0268000000e+02,
                4.2148000000e+01, 1.8149000000e+01, 7.5934000000e+00,
                3.1964000000e+00, 1.2743000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{5.7773000000e-04, 4.1736200000e-03, 1.9959720000e-02,
                8.1618400000e-03, -2.1026563000e-01, -4.9752649000e-01,
                -2.6794826000e-01, 4.9290233000e-01},
      doubles_t{2.7274000000e+02, 1.0268000000e+02, 4.2148000000e+01,
                1.8149000000e+01, 7.5934000000e+00, 3.1964000000e+00,
                1.2743000000e+00, 2.8258000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{8.4090000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{2.5768400000e-02, 1.4544210000e-01, 3.7137210000e-01,
                           4.8000020000e-01, 2.8968000000e-01},
                 doubles_t{7.4762000000e+01, 2.1302000000e+01, 7.3436000000e+00,
                           2.5651000000e+00, 8.1970000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{2.4700000000e-01}));
    return abs_t(name, 32, r0, shells.begin(), shells.end());
} // cc_dash_pvdz_oparen_seg_dash_opt_cparen__32

} // namespace chemcache
