/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvdz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvdz_oparen_seg_dash_opt_cparen__34() {
    // Basis Set name and origin point
    std::string name("cc-pvdz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(
      make_shell(pure_t::pure, 0,
                 doubles_t{2.0037000000e-04, 1.5550800000e-03, 8.0871800000e-03,
                           3.3034400000e-02, 1.0838396000e-01, 2.7088317000e-01,
                           4.2373702000e-01, 2.8523483000e-01, 1.2347500000e-02,
                           -3.2021560000e-02},
                 doubles_t{5.9899000000e+05, 8.9783000000e+04, 2.0435000000e+04,
                           5.7869000000e+03, 1.8873000000e+03, 6.8097000000e+02,
                           2.6539000000e+02, 1.0863000000e+02, 3.3760000000e+01,
                           1.4465000000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.5000000000e-07, 8.2400000000e-06, 1.0000000000e-07,
                -2.3798600000e-03, -1.4168220000e-02, -8.0706940000e-02,
                -9.4090340000e-02, 4.7515340000e-01, 6.3340054000e-01,
                9.0409490000e-02},
      doubles_t{5.9899000000e+05, 8.9783000000e+04, 2.0435000000e+04,
                1.8873000000e+03, 6.8097000000e+02, 2.6539000000e+02,
                1.0863000000e+02, 3.3760000000e+01, 1.4465000000e+01,
                4.3890000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.4000000000e-07, -1.0800000000e-06, -9.4100000000e-06,
                1.2850500000e-03, 5.4536300000e-03, 1.4742070000e-02,
                -1.1863438000e-01, -3.1735988000e-01, 5.5772291000e-01,
                7.4033257000e-01},
      doubles_t{5.9899000000e+05, 8.9783000000e+04, 2.0435000000e+04,
                6.8097000000e+02, 2.6539000000e+02, 1.0863000000e+02,
                3.3760000000e+01, 1.4465000000e+01, 4.3890000000e+00,
                1.8783000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{1.0000000000e-08, -2.0000000000e-08, 1.1660000000e-05,
                1.7200000000e-06, 4.8028000000e-04, 4.4611200000e-03,
                -3.3698980000e-02, -2.3490751000e-01, 6.9118740000e-01},
      doubles_t{5.9899000000e+05, 8.9783000000e+04, 2.6539000000e+02,
                1.0863000000e+02, 3.3760000000e+01, 1.4465000000e+01,
                4.3890000000e+00, 1.8783000000e+00, 3.5859000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.3649000000e-01}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{1.4127000000e-03, 1.1858940000e-02, 5.9520140000e-02,
                           1.9725865000e-01, 4.0091317000e-01, 3.9957073000e-01,
                           1.1356740000e-01, -3.7686300000e-03},
                 doubles_t{4.1356000000e+03, 9.8034000000e+02, 3.1635000000e+02,
                           1.1925000000e+02, 4.9068000000e+01, 2.1212000000e+01,
                           8.9462000000e+00, 3.8236000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.4730000000e-05, -7.4008000000e-04, -5.9629300000e-03,
                -2.5845440000e-02, -1.5236730000e-02, 2.7114595000e-01,
                6.0591026000e-01, 3.5300864000e-01},
      doubles_t{9.8034000000e+02, 3.1635000000e+02, 1.1925000000e+02,
                4.9068000000e+01, 2.1212000000e+01, 8.9462000000e+00,
                3.8236000000e+00, 1.5883000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{6.6314000000e-04, 4.8333000000e-03, 2.3495020000e-02,
                1.0322300000e-02, -2.3899971000e-01, -5.7716508000e-01,
                -2.8897075000e-01, 5.4697633000e-01},
      doubles_t{3.1635000000e+02, 1.1925000000e+02, 4.9068000000e+01,
                2.1212000000e+01, 8.9462000000e+00, 3.8236000000e+00,
                1.5883000000e+00, 4.0969000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.2459000000e-01}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{2.3498200000e-02, 1.3751830000e-01, 3.6648240000e-01,
                           4.8747170000e-01, 2.7657690000e-01},
                 doubles_t{9.4472000000e+01, 2.7180000000e+01, 9.5068000000e+00,
                           3.4168000000e+00, 1.1479000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{3.6820000000e-01}));
    return abs_t(name, 34, r0, shells.begin(), shells.end());
} // cc_dash_pvdz_oparen_seg_dash_opt_cparen__34

} // namespace chemcache
