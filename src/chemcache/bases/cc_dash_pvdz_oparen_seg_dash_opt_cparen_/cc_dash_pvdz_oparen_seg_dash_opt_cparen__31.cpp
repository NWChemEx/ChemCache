/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvdz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvdz_oparen_seg_dash_opt_cparen__31() {
    // Basis Set name and origin point
    std::string name("cc-pvdz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(
      make_shell(pure_t::pure, 0,
                 doubles_t{2.0678000000e-04, 1.6044000000e-03, 8.3402600000e-03,
                           3.4024800000e-02, 1.1125962000e-01, 2.7591307000e-01,
                           4.2421289000e-01, 2.7709753000e-01, 1.0659050000e-02,
                           -2.9082650000e-02},
                 doubles_t{4.8513000000e+05, 7.2719000000e+04, 1.6552000000e+04,
                           4.6878000000e+03, 1.5291000000e+03, 5.5181000000e+02,
                           2.1518000000e+02, 8.8174000000e+01, 2.7154000000e+01,
                           1.1503000000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.3000000000e-07, 8.4600000000e-06, -2.1400000000e-06,
                -2.5045800000e-03, -1.4463410000e-02, -8.2131580000e-02,
                -8.8962600000e-02, 4.8992532000e-01, 6.2520622000e-01,
                7.9546160000e-02},
      doubles_t{4.8513000000e+05, 7.2719000000e+04, 1.6552000000e+04,
                1.5291000000e+03, 5.5181000000e+02, 2.1518000000e+02,
                8.8174000000e+01, 2.7154000000e+01, 1.1503000000e+01,
                3.3018000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.5000000000e-07, -1.3000000000e-06, -1.1280000000e-05,
                1.5132700000e-03, 6.1294600000e-03, 1.5521800000e-02,
                -1.2608435000e-01, -3.0592978000e-01, 6.0996232000e-01,
                6.7498910000e-01},
      doubles_t{4.8513000000e+05, 7.2719000000e+04, 1.6552000000e+04,
                5.5181000000e+02, 2.1518000000e+02, 8.8174000000e+01,
                2.7154000000e+01, 1.1503000000e+01, 3.3018000000e+00,
                1.3314000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0000000000e-08, -4.0000000000e-08, 4.7410000000e-05,
                2.0043000000e-04, -2.8751400000e-03, -1.0565320000e-02,
                5.7372800000e-03, -1.4367133000e-01, 6.3347727000e-01},
      doubles_t{4.8513000000e+05, 7.2719000000e+04, 2.1518000000e+02,
                8.8174000000e+01, 2.7154000000e+01, 1.1503000000e+01,
                3.3018000000e+00, 1.3314000000e+00, 1.9316000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{7.0895000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{1.5260000000e-03, 1.2748690000e-02, 6.3378820000e-02,
                           2.0661229000e-01, 4.0944916000e-01, 3.9197582000e-01,
                           1.0123109000e-01, -4.3708000000e-03},
                 doubles_t{3.2486000000e+03, 7.6997000000e+02, 2.4820000000e+02,
                           9.3364000000e+01, 3.8251000000e+01, 1.6422000000e+01,
                           6.7918000000e+00, 2.8336000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-1.6720000000e-05, -7.6320000000e-04, -5.7849600000e-03,
                -2.5223880000e-02, -9.7415900000e-03, 2.8326138000e-01,
                6.0085232000e-01, 3.4761176000e-01},
      doubles_t{7.6997000000e+02, 2.4820000000e+02, 9.3364000000e+01,
                3.8251000000e+01, 1.6422000000e+01, 6.7918000000e+00,
                2.8336000000e+00, 1.1062000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{6.0265000000e-04, 4.2515100000e-03, 2.0069960000e-02,
                5.7311000000e-03, -2.2050780000e-01, -4.9022880000e-01,
                -2.6103982000e-01, 4.3877138000e-01},
      doubles_t{2.4820000000e+02, 9.3364000000e+01, 3.8251000000e+01,
                1.6422000000e+01, 6.7918000000e+00, 2.8336000000e+00,
                1.1062000000e+00, 2.2250000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{6.1772000000e-02}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{2.7382500000e-02, 1.5108050000e-01, 3.7492170000e-01,
                           4.7507990000e-01, 2.9827500000e-01},
                 doubles_t{6.5337000000e+01, 1.8497000000e+01, 6.3150000000e+00,
                           2.1635000000e+00, 6.6675000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{1.8840000000e-01}));
    return abs_t(name, 31, r0, shells.begin(), shells.end());
} // cc_dash_pvdz_oparen_seg_dash_opt_cparen__31

} // namespace chemcache
