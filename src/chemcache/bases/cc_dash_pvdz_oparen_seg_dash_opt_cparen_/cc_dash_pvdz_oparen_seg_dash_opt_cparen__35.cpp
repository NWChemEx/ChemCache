/*
 * Copyright 2022 NWChemEx-Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is autogenerated by: generate_basis.py
 *
 * NOTE: Any modifications made in this file will be lost next time
 *       generate_basis.py is run.
 */

#include "cc_dash_pvdz_oparen_seg_dash_opt_cparen_.hpp"
#include <simde/basis_set/atomic_basis_set.hpp>
#include <simde/types.hpp>

namespace chemcache {

using abs_t     = simde::type::atomic_basis_set;
using shell_t   = simde::type::shell;
using center_t  = simde::type::point;
using shells_t  = std::vector<shell_t>;
using doubles_t = std::vector<double>;
using pure_t    = chemist::ShellType;

abs_t cc_dash_pvdz_oparen_seg_dash_opt_cparen__35() {
    // Basis Set name and origin point
    std::string name("cc-pvdz(seg-opt)");
    center_t r0(0.0, 0.0, 0.0);

    auto make_shell = [&r0](auto pure, auto l, const doubles_t& cs,
                            const doubles_t& es) {
        return shell_t(pure, l, cs.begin(), cs.end(), es.begin(), es.end(), r0);
    };

    shells_t shells;
    shells.emplace_back(
      make_shell(pure_t::pure, 0,
                 doubles_t{1.9838000000e-04, 1.5396800000e-03, 8.0095600000e-03,
                           3.2734100000e-02, 1.0753988000e-01, 2.6944869000e-01,
                           4.2359789000e-01, 2.8757354000e-01, 1.2904730000e-02,
                           -3.2872220000e-02},
                 doubles_t{6.4010000000e+05, 9.5938000000e+04, 2.1833000000e+04,
                           6.1819000000e+03, 2.0157000000e+03, 7.2710000000e+02,
                           2.8328000000e+02, 1.1591000000e+02, 3.6124000000e+01,
                           1.5532000000e+01}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{6.0000000000e-07, 8.1900000000e-06, 7.2000000000e-07,
                -2.3436700000e-03, -1.4083780000e-02, -8.0309920000e-02,
                -9.5555330000e-02, 4.7068230000e-01, 6.3574307000e-01,
                9.3763970000e-02},
      doubles_t{6.4010000000e+05, 9.5938000000e+04, 2.1833000000e+04,
                2.0157000000e+03, 7.2710000000e+02, 2.8328000000e+02,
                1.1591000000e+02, 3.6124000000e+01, 1.5532000000e+01,
                4.7857000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-2.2000000000e-07, -9.6000000000e-07, -9.0000000000e-06,
                1.2329900000e-03, 5.3090300000e-03, 1.4615340000e-02,
                -1.1713863000e-01, -3.2168324000e-01, 5.4502469000e-01,
                7.5840621000e-01},
      doubles_t{6.4010000000e+05, 9.5938000000e+04, 2.1833000000e+04,
                7.2710000000e+02, 2.8328000000e+02, 1.1591000000e+02,
                3.6124000000e+01, 1.5532000000e+01, 4.7857000000e+00,
                2.0817000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 0,
      doubles_t{-3.0000000000e-08, -6.0000000000e-08, -9.9700000000e-06,
                -9.7720000000e-05, 1.9814800000e-03, 1.1344090000e-02,
                -4.8343100000e-02, -2.6509864000e-01, 7.0365692000e-01},
      doubles_t{9.5938000000e+04, 2.1833000000e+04, 2.8328000000e+02,
                1.1591000000e+02, 3.6124000000e+01, 1.5532000000e+01,
                4.7857000000e+00, 2.0817000000e+00, 4.2028000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 0, doubles_t{1.0000000000e+00},
                                   doubles_t{1.6069000000e-01}));
    shells.emplace_back(
      make_shell(pure_t::pure, 1,
                 doubles_t{1.4448000000e-03, 1.2128940000e-02, 6.0813760000e-02,
                           2.0098299000e-01, 4.0495197000e-01, 3.9580374000e-01,
                           1.0798737000e-01, -5.6535100000e-03},
                 doubles_t{4.3408000000e+03, 1.0289000000e+03, 3.3202000000e+02,
                           1.2516000000e+02, 5.1511000000e+01, 2.2281000000e+01,
                           9.3417000000e+00, 4.0132000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{-2.1570000000e-05, -7.8808000000e-04, -6.2142300000e-03,
                -2.7285710000e-02, -1.2013630000e-02, 2.9121253000e-01,
                6.1192666000e-01, 3.2831407000e-01},
      doubles_t{1.0289000000e+03, 3.3202000000e+02, 1.2516000000e+02,
                5.1511000000e+01, 2.2281000000e+01, 9.3417000000e+00,
                4.0132000000e+00, 1.7002000000e+00}));
    shells.emplace_back(make_shell(
      pure_t::pure, 1,
      doubles_t{8.6954000000e-04, 6.2994900000e-03, 3.0457310000e-02,
                9.6149800000e-03, -3.1709716000e-01, -7.1591644000e-01,
                -3.2266662000e-01, 5.6602889000e-01},
      doubles_t{3.3202000000e+02, 1.2516000000e+02, 5.1511000000e+01,
                2.2281000000e+01, 9.3417000000e+00, 4.0132000000e+00,
                1.7002000000e+00, 4.7194000000e-01}));
    shells.emplace_back(make_shell(pure_t::pure, 1, doubles_t{1.0000000000e+00},
                                   doubles_t{1.4421000000e-01}));
    shells.emplace_back(
      make_shell(pure_t::pure, 2,
                 doubles_t{2.2658300000e-02, 1.3458950000e-01, 3.6471810000e-01,
                           4.9041960000e-01, 2.7138850000e-01},
                 doubles_t{1.0483000000e+02, 3.0272000000e+01, 1.0649000000e+01,
                           3.8696000000e+00, 1.3239000000e+00}));
    shells.emplace_back(make_shell(pure_t::pure, 2, doubles_t{1.0000000000e+00},
                                   doubles_t{4.0980000000e-01}));
    return abs_t(name, 35, r0, shells.begin(), shells.end());
} // cc_dash_pvdz_oparen_seg_dash_opt_cparen__35

} // namespace chemcache
